<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Ada 的个人博客主页</title>
    <link>https://github.com/Adashuai5/Adashuai5.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>当然我也在扯淡。。</description>
    <pubDate>Wed, 24 Jun 2020 14:49:30 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>React Hooks + TypeScript 做个仿 MacOS 桌面（四）：Canvas 实现画图工具</title>
      <link>https://github.com/Adashuai5/Adashuai5.github.io/2020/06/18/React-Hooks-TypeScript-%E5%81%9A%E4%B8%AA%E4%BB%BF-MacOS-%E6%A1%8C%E9%9D%A2%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9ACanvas-%E5%AE%9E%E7%8E%B0%E7%94%BB%E5%9B%BE%E5%B7%A5%E5%85%B7/</link>
      <guid>https://github.com/Adashuai5/Adashuai5.github.io/2020/06/18/React-Hooks-TypeScript-%E5%81%9A%E4%B8%AA%E4%BB%BF-MacOS-%E6%A1%8C%E9%9D%A2%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9ACanvas-%E5%AE%9E%E7%8E%B0%E7%94%BB%E5%9B%BE%E5%B7%A5%E5%85%B7/</guid>
      <pubDate>Thu, 18 Jun 2020 14:48:08 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;这是我的项目记录系列文章第四篇，&lt;a href=&quot;https://zhuanlan.zhihu.com/p/147974188&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;上一篇&lt;/a&gt; 主要介绍了 Dock 弹框等的实现，同时提到了此次主角 drawi
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>这是我的项目记录系列文章第四篇，<a href="https://zhuanlan.zhihu.com/p/147974188" target="_blank" rel="noopener">上一篇</a> 主要介绍了 Dock 弹框等的实现，同时提到了此次主角 drawing 画板。</p><p>画板是目前实现的功能里较为典型的 Hooks 用例，本篇就来详细介绍下，画板最终的效果如图题所示，同时你可以在我的项目 <a href="https://github.com/Adashuai5/my-desktop">代码（欢迎 watch 和 star）</a>体验。</p><h3 id="Canvas-实现画布（译文）"><a href="#Canvas-实现画布（译文）" class="headerlink" title="Canvas 实现画布（译文）"></a>Canvas 实现画布（译文）</h3><p>实现画布部分基本参考 <a href="https://dev.to/ankursheel/react-component-to-fraw-on-a-page-using-hooks-and-typescript-2ahp" target="_blank" rel="noopener">React Component to draw on a page using Hooks and Typescript</a> 该文提供完整代码及介绍，十分详细，如果你的英文不错，你可以直接看这篇文章跳过本节译文。</p><h4 id="创建组件"><a href="#创建组件" class="headerlink" title="创建组件"></a>创建组件</h4><p>我们需要做的第一件事是创建一个 Canvas 组件。 画布需要占用一些空间，我们希望任何父组件都能够覆盖这些空间，所以我们将添加宽度和高度属性。</p><p>同时我们将 window.innerWidth 和 window.innerHeight 分别设置为 Canvas 的宽度和高度 defaultProps。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import React from &#39;react&#39;;</span><br><span class="line"></span><br><span class="line">interface CanvasProps &#123;</span><br><span class="line">    width: number;</span><br><span class="line">    height: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const Canvas &#x3D; (&#123; width, height &#125;: CanvasProps) &#x3D;&gt; &#123;</span><br><span class="line">     return &lt;canvas height&#x3D;&#123;height&#125; width&#x3D;&#123;width&#125; &#x2F;&gt;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Canvas.defaultProps &#x3D; &#123;</span><br><span class="line">    width: window.innerWidth,</span><br><span class="line">    height: window.innerHeight,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default Canvas;</span><br></pre></td></tr></table></figure><h4 id="让我们画画吧"><a href="#让我们画画吧" class="headerlink" title="让我们画画吧"></a>让我们画画吧</h4><p>因为我们需要修改 canvas 元素，所以我们需要为它添加一个 ref。 我们可以通过使用 useRef 钩子修改我们的 canvas 来实现这一点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const canvasRef &#x3D; useRef&lt;HTMLCanvasElement&gt;(null);</span><br><span class="line">return &lt;canvas ref&#x3D;&#123;canvasRef&#125; height&#x3D;&#123;height&#125; width&#x3D;&#123;width&#125; &#x2F;&gt;;</span><br></pre></td></tr></table></figure><h4 id="设置状态"><a href="#设置状态" class="headerlink" title="设置状态"></a>设置状态</h4><p>我们需要跟踪一些变量:</p><ul><li>鼠标位置</li><li>我们是否在画画</li></ul><p>我们可以通过添加 useState 钩子来做到这一点。Coordinate 是鼠标位置坐标的类型。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">type Coordinate &#x3D; &#123;</span><br><span class="line">    x: number;</span><br><span class="line">    y: number;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const Canvas &#x3D; (&#123; width, height &#125;: CanvasProps) &#x3D;&gt; &#123;</span><br><span class="line">const [isPainting, setIsPainting] &#x3D; useState(false);</span><br><span class="line">const [mousePosition, setMousePosition] &#x3D; useState&lt;Coordinate | undefined&gt;(undefined);</span><br><span class="line">&#x2F;&#x2F; ... other stuff here</span><br></pre></td></tr></table></figure><h4 id="当鼠标按下时开始绘图"><a href="#当鼠标按下时开始绘图" class="headerlink" title="当鼠标按下时开始绘图"></a>当鼠标按下时开始绘图</h4><p>我们将在 useEffect 钩子中添加事件侦听器。 如果我们有一个对画布的有效引用，那么我们将向 mouseDown 事件添加一个事件侦听器。 在 unmount 时，我们需要删除该事件侦听器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">useEffect(() &#x3D;&gt; &#123;</span><br><span class="line">       if (!canvasRef.current) &#123;</span><br><span class="line">           return;</span><br><span class="line">       &#125;</span><br><span class="line">       const canvas: HTMLCanvasElement &#x3D; canvasRef.current;</span><br><span class="line">       canvas.addEventListener(&#39;mousedown&#39;, startPaint);</span><br><span class="line">       return () &#x3D;&gt; &#123;</span><br><span class="line">           canvas.removeEventListener(&#39;mousedown&#39;, startPaint);</span><br><span class="line">       &#125;;</span><br><span class="line">   &#125;, [startPaint]);</span><br></pre></td></tr></table></figure><p>Startpaint 需要获取鼠标的当前坐标并将 isPainting 设置为 true。 我们还将把它包装在一个 useCallback 钩子中，这样我们就可以在 useCallback 钩子中使用它。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> const startPaint &#x3D; useCallback((event: MouseEvent) &#x3D;&gt; &#123;</span><br><span class="line">        const coordinates &#x3D; getCoordinates(event);</span><br><span class="line">        if (coordinates) &#123;</span><br><span class="line">            setIsPainting(true);</span><br><span class="line">            setMousePosition(coordinates);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, []);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; ...other stuff here</span><br><span class="line"></span><br><span class="line">const getCoordinates &#x3D; (event: MouseEvent): Coordinate | undefined &#x3D;&gt; &#123;</span><br><span class="line">    if (!canvasRef.current) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const canvas: HTMLCanvasElement &#x3D; canvasRef.current;</span><br><span class="line">    return &#123;event.pageX - canvas.offsetLeft, event.pageY - canvas.offsetTop&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="随鼠标移动画线"><a href="#随鼠标移动画线" class="headerlink" title="随鼠标移动画线"></a>随鼠标移动画线</h4><p>与 mouseDown 事件侦听器类似，我们将使用 useEffect hook 来添加 mousemove 事件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">useEffect(() &#x3D;&gt; &#123;</span><br><span class="line">        if (!canvasRef.current) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        const canvas: HTMLCanvasElement &#x3D; canvasRef.current;</span><br><span class="line">        canvas.addEventListener(&#39;mousemove&#39;, paint);</span><br><span class="line">        return () &#x3D;&gt; &#123;</span><br><span class="line">            canvas.removeEventListener(&#39;mousemove&#39;, paint);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;, [paint]);</span><br></pre></td></tr></table></figure><p>paint 需要：</p><ul><li>检查一下我们是否在 paint</li><li>获取新鼠标坐标</li><li>通过从画布获取呈现上下文，将新旧坐标连线</li><li>更新旧坐标</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">const paint &#x3D; useCallback(</span><br><span class="line">        (event: MouseEvent) &#x3D;&gt; &#123;</span><br><span class="line">            if (isPainting) &#123;</span><br><span class="line">                const newMousePosition &#x3D; getCoordinates(event);</span><br><span class="line">                if (mousePosition &amp;&amp; newMousePosition) &#123;</span><br><span class="line">                    drawLine(mousePosition, newMousePosition);</span><br><span class="line">                    setMousePosition(newMousePosition);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        [isPainting, mousePosition]</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; ...other stuff here</span><br><span class="line"></span><br><span class="line">const drawLine &#x3D; (originalMousePosition: Coordinate, newMousePosition: Coordinate) &#x3D;&gt; &#123;</span><br><span class="line">        if (!canvasRef.current) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        const canvas: HTMLCanvasElement &#x3D; canvasRef.current;</span><br><span class="line">        const context &#x3D; canvas.getContext(&#39;2d&#39;);</span><br><span class="line">        if (context) &#123;</span><br><span class="line">            context.strokeStyle &#x3D; &#39;red&#39;;</span><br><span class="line">            context.lineJoin &#x3D; &#39;round&#39;;</span><br><span class="line">            context.lineWidth &#x3D; 5;</span><br><span class="line"></span><br><span class="line">            context.beginPath();</span><br><span class="line">            context.moveTo(originalMousePosition.x, originalMousePosition.y);</span><br><span class="line">            context.lineTo(newMousePosition.x, newMousePosition.y);</span><br><span class="line">            context.closePath();</span><br><span class="line"></span><br><span class="line">            context.stroke();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><h4 id="鼠标放开则停止绘制"><a href="#鼠标放开则停止绘制" class="headerlink" title="鼠标放开则停止绘制"></a>鼠标放开则停止绘制</h4><p>当用户释放鼠标或者将鼠标移出画布区域时，我们希望停止绘制：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">useEffect(() &#x3D;&gt; &#123;</span><br><span class="line">        if (!canvasRef.current) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        const canvas: HTMLCanvasElement &#x3D; canvasRef.current;</span><br><span class="line">        canvas.addEventListener(&#39;mouseup&#39;, exitPaint);</span><br><span class="line">        canvas.addEventListener(&#39;mouseleave&#39;, exitPaint);</span><br><span class="line">        return () &#x3D;&gt; &#123;</span><br><span class="line">            canvas.removeEventListener(&#39;mouseup&#39;, exitPaint);</span><br><span class="line">            canvas.removeEventListener(&#39;mouseleave&#39;, exitPaint);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;, [exitPaint]);</span><br></pre></td></tr></table></figure><p>在 exitPaint 中，我们只是将 isPainting 设置为 false</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const exitPaint &#x3D; useCallback(() &#x3D;&gt; &#123;</span><br><span class="line">        setIsPainting(false);</span><br><span class="line">    &#125;, []);</span><br></pre></td></tr></table></figure><p>译文完</p><h3 id="优化画板：添加功能"><a href="#优化画板：添加功能" class="headerlink" title="优化画板：添加功能"></a>优化画板：添加功能</h3><p>画板已经可以画画了，但是作为一个独立工具，只是能够画画是远远不够的，接下来我们为其添加功能面板：</p><p><img src="https://upload-images.jianshu.io/upload_images/7094266-1f27cc994e37b30b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h4 id="封装-Iconfont-组件"><a href="#封装-Iconfont-组件" class="headerlink" title="封装 Iconfont 组件"></a>封装 Iconfont 组件</h4><p>功能面板用到了很多图标，后续项目也会用到，因此我封装了一个 Iconfont 组件<br>，图标来源是 iconfont，每次我们修改或增加图标等，只需要修改 scriptElem.src 即可</p><p><img src="https://upload-images.jianshu.io/upload_images/7094266-f90cd3f40a5c4d26?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; src&#x2F;components&#x2F;iconfont&#x2F;index.tsx</span><br><span class="line">import React, &#123; CSSProperties, RefObject &#125; from &quot;react&quot;;</span><br><span class="line">import &quot;.&#x2F;index.scss&quot;;</span><br><span class="line"></span><br><span class="line">const scriptElem &#x3D; document.createElement(&quot;script&quot;);</span><br><span class="line">scriptElem.src &#x3D; &quot;&#x2F;&#x2F;at.alicdn.com&#x2F;t&#x2F;font_1848517_ds8sk573mfk.js&quot;;</span><br><span class="line">document.body.appendChild(scriptElem);</span><br><span class="line"></span><br><span class="line">interface PropsTypes &#123;</span><br><span class="line">  className?: string;</span><br><span class="line">  type: string;</span><br><span class="line">  style?: object;</span><br><span class="line">  svgRef?: RefObject&lt;SVGSVGElement&gt;;</span><br><span class="line">  clickEvent?: (T: any) &#x3D;&gt; void;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export const Iconfont &#x3D; (&#123;</span><br><span class="line">  className,</span><br><span class="line">  type,</span><br><span class="line">  style,</span><br><span class="line">  svgRef,</span><br><span class="line">  clickEvent,</span><br><span class="line">&#125;: PropsTypes) &#x3D;&gt; &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;svg</span><br><span class="line">      ref&#x3D;&#123;svgRef&#125;</span><br><span class="line">      className&#x3D;&#123;className ? &quot;icon-font &quot; + className : &quot;icon-font&quot;&#125;</span><br><span class="line">      aria-hidden&#x3D;&quot;true&quot;</span><br><span class="line">      style&#x3D;&#123;style as CSSProperties&#125;</span><br><span class="line">      onClick&#x3D;&#123;clickEvent&#125;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;use xlinkHref&#x3D;&#123;&#96;#$&#123;type&#125;&#96;&#125; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;svg&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; .&#x2F;index.scss</span><br><span class="line">.icon-font &#123;</span><br><span class="line">  width: 1em;</span><br><span class="line">  height: 1em;</span><br><span class="line">  vertical-align: -0.15em;</span><br><span class="line">  fill: currentColor;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="功能面板结构"><a href="#功能面板结构" class="headerlink" title="功能面板结构"></a>功能面板结构</h4><p>功能面板结构如下，对应本节开头图片：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Iconfont &#125; from &quot;..&#x2F;iconfont&quot;;</span><br><span class="line">import &#123; CSSTransition &#125; from &quot;react-transition-group&quot;;</span><br><span class="line"></span><br><span class="line">return (</span><br><span class="line">    &lt;React.Fragment&gt;</span><br><span class="line">      &lt;canvas id&#x3D;&quot;canvas&quot; ref&#x3D;&#123;canvasRef&#125; height&#x3D;&#123;height&#125; width&#x3D;&#123;width&#125; &#x2F;&gt;</span><br><span class="line">      &lt;div</span><br><span class="line">        id&#x3D;&quot;toolbox-open&quot;</span><br><span class="line">        style&#x3D;&#123;</span><br><span class="line">          &#123;</span><br><span class="line">            borderRadius: isToolboxOpen ? null : 5,</span><br><span class="line">          &#125; as CSSProperties</span><br><span class="line">        &#125;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;Iconfont</span><br><span class="line">          type&#x3D;&#123;isToolboxOpen ? &quot;icon-upward_flat&quot; : &quot;icon-downward_flat&quot;&#125;</span><br><span class="line">          style&#x3D;&#123;&#123;</span><br><span class="line">            width: &quot;100%&quot;,</span><br><span class="line">            fontSize: 32,</span><br><span class="line">          &#125;&#125;</span><br><span class="line">          clickEvent&#x3D;&#123;toolboxOpenClick&#125;</span><br><span class="line">        &#x2F;&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;CSSTransition</span><br><span class="line">        in&#x3D;&#123;isToolboxOpen&#125; &#x2F;&#x2F;用于判断是否出现的状态</span><br><span class="line">        timeout&#x3D;&#123;300&#125; &#x2F;&#x2F;动画持续时间</span><br><span class="line">        classNames&#x3D;&quot;toolbox&quot; &#x2F;&#x2F;className值，防止重复</span><br><span class="line">        unmountOnExit</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;div id&#x3D;&quot;toolbox&quot;&gt;</span><br><span class="line">              &lt;span&gt;Options&lt;&#x2F;span&gt;</span><br><span class="line">              &lt;div className&#x3D;&quot;options&quot;&gt;</span><br><span class="line">                ...</span><br><span class="line">              &lt;&#x2F;div&gt;</span><br><span class="line">              &lt;span&gt;Toolbox&lt;&#x2F;span&gt;</span><br><span class="line">              &lt;div className&#x3D;&quot;tools&quot;&gt;</span><br><span class="line">                ...</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">          &lt;div className&#x3D;&quot;sizes&quot;&gt;</span><br><span class="line">            ...</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">          &lt;ol className&#x3D;&quot;colors&quot;&gt;</span><br><span class="line">            ...</span><br><span class="line">          &lt;&#x2F;ol&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;&#x2F;CSSTransition&gt;</span><br><span class="line">    &lt;&#x2F;React.Fragment&gt;</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><p>通过 isToolboxOpen 设定功能面板是否收缩，引入 CSSTransition 添加展开收缩动画。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const [isToolboxOpen, setToolboxOpen] &#x3D; useState(true);</span><br><span class="line">  const toolboxOpenClick &#x3D; useCallback(</span><br><span class="line">    (e) &#x3D;&gt; &#123;</span><br><span class="line">      setToolboxOpen(!isToolboxOpen);</span><br><span class="line">    &#125;,</span><br><span class="line">    [isToolboxOpen]</span><br><span class="line">  );</span><br></pre></td></tr></table></figure><h4 id="下面我们依次介绍各个功能模块："><a href="#下面我们依次介绍各个功能模块：" class="headerlink" title="下面我们依次介绍各个功能模块："></a>下面我们依次介绍各个功能模块：</h4><h5 id="tools-面板："><a href="#tools-面板：" class="headerlink" title="tools 面板："></a>tools 面板：</h5><p><img src="https://upload-images.jianshu.io/upload_images/7094266-867a1490a29a8274?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>主要用来选择是画笔还是橡皮擦：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const toolsMap &#x3D; [&quot;canvas_paint&quot;, &quot;canvas_eraser&quot;];</span><br><span class="line">const [eraserEnabled, setEraserEnabled] &#x3D; useState(false);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className&#x3D;&quot;tools&quot;&gt;</span><br><span class="line">  &#123;toolsMap.map((tool, index) &#x3D;&gt; &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;Iconfont</span><br><span class="line">        key&#x3D;&#123;index + tool&#125;</span><br><span class="line">        className&#x3D;&#123;</span><br><span class="line">          tool &#x3D;&#x3D;&#x3D; &quot;canvas_eraser&quot;</span><br><span class="line">            ? eraserEnabled</span><br><span class="line">              ? &quot;active&quot;</span><br><span class="line">              : &quot;&quot;</span><br><span class="line">            : !eraserEnabled</span><br><span class="line">            ? &quot;active&quot;</span><br><span class="line">            : &quot;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        type&#x3D;&#123;&quot;icon-&quot; + tool&#125;</span><br><span class="line">        style&#x3D;&#123;&#123; fontSize: 50 &#125;&#125;</span><br><span class="line">        clickEvent&#x3D;&#123;(e) &#x3D;&gt; onToolsClick([e, tool])&#125;</span><br><span class="line">      &#x2F;&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;)&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const onToolsClick &#x3D; useCallback(([e, toolName]) &#x3D;&gt; &#123;</span><br><span class="line">  const el &#x3D; e.currentTarget;</span><br><span class="line">  if (el.classList[1]) return;</span><br><span class="line">  toolName &#x3D;&#x3D;&#x3D; &quot;canvas_eraser&quot;</span><br><span class="line">    ? setEraserEnabled(true)</span><br><span class="line">    : setEraserEnabled(false);</span><br><span class="line">  el.classList.add(&quot;active&quot;);</span><br><span class="line">  el.parentNode.childNodes.forEach((item: HTMLLIElement) &#x3D;&gt; &#123;</span><br><span class="line">    if (!item.matches(&quot;svg&quot;) || item &#x3D;&#x3D;&#x3D; el) return;</span><br><span class="line">    item.classList.remove(&quot;active&quot;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure><p>修改 paint 函数，通过 eraserEnabled 判断是 clearRect 还是 drawLine：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">if (mousePosition &amp;&amp; newMousePosition) &#123;</span><br><span class="line">  if (eraserEnabled) &#123;</span><br><span class="line">    clearRect(&#123;</span><br><span class="line">      x: newMousePosition.x - lineWidth &#x2F; 2,</span><br><span class="line">      y: newMousePosition.y - lineWidth &#x2F; 2,</span><br><span class="line">      width: lineWidth,</span><br><span class="line">      height: lineWidth,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    drawLine(mousePosition, newMousePosition);</span><br><span class="line">    setMousePosition(newMousePosition);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="sizes-colors-面板："><a href="#sizes-colors-面板：" class="headerlink" title="sizes/colors 面板："></a>sizes/colors 面板：</h5><p><img src="https://upload-images.jianshu.io/upload_images/7094266-4f803da20f795f2c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>colors 面板列出了几种常用颜色，增加了原生颜色选择器，可改变画笔颜色：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;ol className&#x3D;&quot;colors&quot;&gt;</span><br><span class="line">  &#123;colorMap.map((color, index) &#x3D;&gt; &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;li</span><br><span class="line">        className&#x3D;&#123;color &#x3D;&#x3D;&#x3D; strokeStyle ? color + &quot; active&quot; : color&#125;</span><br><span class="line">        key&#x3D;&#123;index + color&#125;</span><br><span class="line">        onClick&#x3D;&#123;(e) &#x3D;&gt; onColorsClick([e, &quot;li&quot;, color])&#125;</span><br><span class="line">      &gt;&lt;&#x2F;li&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;)&#125;</span><br><span class="line">  &lt;input</span><br><span class="line">    type&#x3D;&quot;color&quot;</span><br><span class="line">    value&#x3D;&#123;strokeStyle&#125;</span><br><span class="line">    onChange&#x3D;&#123;onColorsChange&#125;</span><br><span class="line">    id&#x3D;&quot;currentColor&quot;</span><br><span class="line">  &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;ol&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const [strokeStyle, setStrokeStyle] &#x3D; useState(&quot;black&quot;);</span><br><span class="line"></span><br><span class="line">const onColorsClick &#x3D; useCallback(([e, selector, color]) &#x3D;&gt; &#123;</span><br><span class="line">  const el &#x3D; e.target;</span><br><span class="line">  if (el.className.includes(&quot;active&quot;)) return;</span><br><span class="line">  setStrokeStyle(color);</span><br><span class="line">  el.classList.add(&quot;active&quot;);</span><br><span class="line">  el.parentNode.childNodes.forEach((item: HTMLLIElement) &#x3D;&gt; &#123;</span><br><span class="line">    if (!item.matches(selector) || item &#x3D;&#x3D;&#x3D; el) return;</span><br><span class="line">    item.classList.remove(&quot;active&quot;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure><p>sizes 主要用来修改画笔或橡皮檫粗细：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className&#x3D;&quot;sizes&quot;&gt;</span><br><span class="line">  &lt;input</span><br><span class="line">    style&#x3D;&#123;</span><br><span class="line">      &#123;</span><br><span class="line">        backgroundColor: eraserEnabled ? &quot;#ebeff4&quot; : strokeStyle,</span><br><span class="line">      &#125; as CSSProperties</span><br><span class="line">    &#125;</span><br><span class="line">    type&#x3D;&quot;range&quot;</span><br><span class="line">    id&#x3D;&quot;range&quot;</span><br><span class="line">    name&#x3D;&quot;range&quot;</span><br><span class="line">    min&#x3D;&quot;1&quot;</span><br><span class="line">    max&#x3D;&quot;20&quot;</span><br><span class="line">    value&#x3D;&#123;lineWidth&#125;</span><br><span class="line">    onChange&#x3D;&#123;onSizesChange&#125;</span><br><span class="line">  &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const [lineWidth, setLineWidth] &#x3D; useState(5);</span><br><span class="line"></span><br><span class="line">const onSizesChange &#x3D; useCallback((e) &#x3D;&gt; &#123;</span><br><span class="line">  setLineWidth(e.target.value);</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure><hr><h5 id="options-面板："><a href="#options-面板：" class="headerlink" title="options 面板："></a>options 面板：</h5><p><img src="https://upload-images.jianshu.io/upload_images/7094266-856b72c57f443e8f?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>主要有保存、清空、回退及前进功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const optionsMap &#x3D; [</span><br><span class="line">  &quot;canvas_save&quot;,</span><br><span class="line">  &quot;canvas_clear&quot;,</span><br><span class="line">  &quot;turn_left_flat&quot;,</span><br><span class="line">  &quot;turn_right_flat&quot;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className&#x3D;&quot;options&quot;&gt;</span><br><span class="line">  &#123;optionsMap.map((option, index) &#x3D;&gt; &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;Iconfont</span><br><span class="line">        svgRef&#x3D;&#123;</span><br><span class="line">          option &#x3D;&#x3D;&#x3D; &quot;turn_right_flat&quot;</span><br><span class="line">            ? goRef</span><br><span class="line">            : option &#x3D;&#x3D;&#x3D; &quot;turn_left_flat&quot;</span><br><span class="line">            ? backRef</span><br><span class="line">            : undefined</span><br><span class="line">        &#125;</span><br><span class="line">        key&#x3D;&#123;index + option&#125;</span><br><span class="line">        className&#x3D;&#123;option&#125;</span><br><span class="line">        type&#x3D;&#123;&quot;icon-&quot; + option&#125;</span><br><span class="line">        style&#x3D;&#123;&#123; fontSize: 50 &#125;&#125;</span><br><span class="line">        clickEvent&#x3D;&#123;(e) &#x3D;&gt; onOptionsClick([e, option])&#125;</span><br><span class="line">      &#x2F;&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;)&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">const onOptionsClick &#x3D; useCallback(</span><br><span class="line">  ([e, toolName]) &#x3D;&gt; &#123;</span><br><span class="line">    switch (toolName) &#123;</span><br><span class="line">      case &quot;canvas_clear&quot;:</span><br><span class="line">        setClearDialogOpen(true);</span><br><span class="line">        break;</span><br><span class="line">      case &quot;canvas_save&quot;:</span><br><span class="line">        saveCanvas();</span><br><span class="line">        break;</span><br><span class="line">      case &quot;turn_left_flat&quot;:</span><br><span class="line">        changeCanvas(&quot;back&quot;);</span><br><span class="line">        break;</span><br><span class="line">      case &quot;turn_right_flat&quot;:</span><br><span class="line">        changeCanvas(&quot;go&quot;);</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  [saveCanvas, changeCanvas]</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>首先我们介绍 回退及前进：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const backRef &#x3D; useRef&lt;SVGSVGElement&gt;(null);</span><br><span class="line">const goRef &#x3D; useRef&lt;SVGSVGElement&gt;(null);</span><br><span class="line">const [step, setStep] &#x3D; useState(-1);</span><br><span class="line">const [canvasHistory, setCanvasHistory] &#x3D; useState&lt;string[]&gt;([]);</span><br></pre></td></tr></table></figure><p>我们在每次画笔或橡皮 mouseup 时，记录下 canvas 片段（saveFragment），值得注意的是，这里我们的 mouseleave 还应该是上文原来的 exitPaint（无 saveFragment）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const exitPaint &#x3D; useCallback(() &#x3D;&gt; &#123;</span><br><span class="line">  setIsPainting(false);</span><br><span class="line">  setMousePosition(undefined);</span><br><span class="line">  saveFragment();</span><br><span class="line">&#125;, [saveFragment]);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const saveFragment &#x3D; useCallback(() &#x3D;&gt; &#123;</span><br><span class="line">  setStep(step + 1);</span><br><span class="line">  if (!canvasRef.current) &#123;</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line">  const canvas: HTMLCanvasElement &#x3D; canvasRef.current;</span><br><span class="line">  canvasHistory.push(canvas.toDataURL());</span><br><span class="line">  setCanvasHistory(canvasHistory);</span><br><span class="line"></span><br><span class="line">  if (!backRef.current || !goRef.current) &#123;</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line">  const back: SVGSVGElement &#x3D; backRef.current;</span><br><span class="line">  const go: SVGSVGElement &#x3D; goRef.current;</span><br><span class="line">  back.classList.add(&quot;active&quot;);</span><br><span class="line">  go.classList.remove(&quot;active&quot;);</span><br><span class="line">&#125;, [step, canvasHistory]);</span><br></pre></td></tr></table></figure><p>当我们点击这两个按钮就会触发 changeCanvas，获取 step 从而得到对应 canvasHistory 内 url，根据它我们能生成一个片段图片画到画布上下文内。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">const changeCanvas &#x3D; useCallback(</span><br><span class="line">  (type) &#x3D;&gt; &#123;</span><br><span class="line">    if (!canvasRef.current || !backRef.current || !goRef.current) &#123;</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line">    const canvas: HTMLCanvasElement &#x3D; canvasRef.current;</span><br><span class="line">    const context &#x3D; canvas.getContext(&quot;2d&quot;);</span><br><span class="line">    const back: SVGSVGElement &#x3D; backRef.current;</span><br><span class="line">    const go: SVGSVGElement &#x3D; goRef.current;</span><br><span class="line">    if (context) &#123;</span><br><span class="line">      let currentStep &#x3D; -1;</span><br><span class="line">      if (type &#x3D;&#x3D;&#x3D; &quot;back&quot; &amp;&amp; step &gt;&#x3D; 0) &#123;</span><br><span class="line">        currentStep &#x3D; step - 1;</span><br><span class="line">        go.classList.add(&quot;active&quot;);</span><br><span class="line">        if (currentStep &lt; 0) &#123;</span><br><span class="line">          back.classList.remove(&quot;active&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; else if (type &#x3D;&#x3D;&#x3D; &quot;go&quot; &amp;&amp; step &lt; canvasHistory.length - 1) &#123;</span><br><span class="line">        currentStep &#x3D; step + 1;</span><br><span class="line">        back.classList.add(&quot;active&quot;);</span><br><span class="line">        if (currentStep &#x3D;&#x3D;&#x3D; canvasHistory.length - 1) &#123;</span><br><span class="line">          go.classList.remove(&quot;active&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        return;</span><br><span class="line">      &#125;</span><br><span class="line">      context.clearRect(0, 0, width, height);</span><br><span class="line">      const canvasPic &#x3D; new Image();</span><br><span class="line">      canvasPic.src &#x3D; canvasHistory[currentStep];</span><br><span class="line">      canvasPic.addEventListener(&quot;load&quot;, () &#x3D;&gt; &#123;</span><br><span class="line">        context.drawImage(canvasPic, 0, 0);</span><br><span class="line">      &#125;);</span><br><span class="line">      setStep(currentStep);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  [canvasHistory, step, width, height]</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>接着我们来看下 保存按钮的实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">const saveCanvas &#x3D; useCallback(() &#x3D;&gt; &#123;</span><br><span class="line">  if (!canvasRef.current) &#123;</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line">  const canvas: HTMLCanvasElement &#x3D; canvasRef.current;</span><br><span class="line">  const context &#x3D; canvas.getContext(&quot;2d&quot;);</span><br><span class="line">  if (context) &#123;</span><br><span class="line">    &#x2F;&#x2F; 用于记录当前 context.globalCompositeOperation ——（合成或混合模式）</span><br><span class="line">    const compositeOperation &#x3D; context.globalCompositeOperation;、</span><br><span class="line">    &#x2F;&#x2F; 设置为 “在现有的画布内容后面绘制新的图形”</span><br><span class="line">    context.globalCompositeOperation &#x3D; &quot;destination-over&quot;;</span><br><span class="line">    context.fillStyle &#x3D; &quot;#fff&quot;;</span><br><span class="line">    context.fillRect(0, 0, width, height);</span><br><span class="line">    const imageData &#x3D; canvas.toDataURL(&quot;image&#x2F;png&quot;);</span><br><span class="line">    &#x2F;&#x2F; 将数据从已有的 ImageData 对象绘制到位图</span><br><span class="line">    context.putImageData(context.getImageData(0, 0, width, height), 0, 0);</span><br><span class="line">    &#x2F;&#x2F; 复原 context.globalCompositeOperation</span><br><span class="line">    context.globalCompositeOperation &#x3D; compositeOperation;</span><br><span class="line">    &#x2F;&#x2F; 下载操作</span><br><span class="line">    const a &#x3D; document.createElement(&quot;a&quot;);</span><br><span class="line">    document.body.appendChild(a);</span><br><span class="line">    a.href &#x3D; imageData;</span><br><span class="line">    a.download &#x3D; &quot;myPaint&quot;;</span><br><span class="line">    a.target &#x3D; &quot;_blank&quot;;</span><br><span class="line">    a.click();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, [width, height]);</span><br></pre></td></tr></table></figure><p>最后我们来讲讲清空按钮：</p><p>清空按钮的实现其实十分简单，但是点击直接删除的话交互太不友好，我们需要给他来个确认弹框，</p><p>根据第三篇讲到的 UseModel 组件我们可以快速写出一个弹框：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useMemo, useState, CSSProperties &#125; from &quot;react&quot;;</span><br><span class="line">import &#123; Dialog, Button &#125; from &quot;react-desktop&#x2F;macOs&quot;;</span><br><span class="line">&#x2F;&#x2F;&#x2F; &lt;reference path&#x3D;&quot;react-desktop.d.ts&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">interface DialogProps &#123;</span><br><span class="line">  width: number;</span><br><span class="line">  height: number;</span><br><span class="line">  id: string;</span><br><span class="line">  title?: string;</span><br><span class="line">  message?: string;</span><br><span class="line">  imgSrc?: string;</span><br><span class="line">  onCheck: (T: any) &#x3D;&gt; void;</span><br><span class="line">  onClose: (T: any) &#x3D;&gt; void;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export const useDialog &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  const [isVisible, setIsVisible] &#x3D; useState(false);</span><br><span class="line">  const openDialog &#x3D; () &#x3D;&gt; setIsVisible(true);</span><br><span class="line">  const closeDialog &#x3D; () &#x3D;&gt; setIsVisible(false);</span><br><span class="line">  const RenderDialog &#x3D; (&#123;</span><br><span class="line">    width,</span><br><span class="line">    height,</span><br><span class="line">    id,</span><br><span class="line">    title,</span><br><span class="line">    message,</span><br><span class="line">    imgSrc,</span><br><span class="line">    onCheck,</span><br><span class="line">    onClose,</span><br><span class="line">  &#125;: DialogProps) &#x3D;&gt; &#123;</span><br><span class="line">    const styles &#x3D; useMemo(</span><br><span class="line">      () &#x3D;&gt; (&#123;</span><br><span class="line">        width: width,</span><br><span class="line">        height: height,</span><br><span class="line">        left: &#96;calc(50vw - $&#123;width &#x2F; 2&#125;px)&#96;,</span><br><span class="line">        top: &#96;calc(50vh - $&#123;height&#125;px)&#96;,</span><br><span class="line">        borderRadius: 4,</span><br><span class="line">      &#125;),</span><br><span class="line">      [width, height]</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    const renderIcon &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">      if (!imgSrc) return;</span><br><span class="line">      return (</span><br><span class="line">        &lt;img</span><br><span class="line">          src&#x3D;&#123;require(&quot;..&#x2F;footer&#x2F;image&#x2F;&quot; + imgSrc)&#125;</span><br><span class="line">          width&#x3D;&quot;52&quot;</span><br><span class="line">          height&#x3D;&quot;52&quot;</span><br><span class="line">          alt&#x3D;&quot;tip&quot;</span><br><span class="line">        &#x2F;&gt;</span><br><span class="line">      );</span><br><span class="line">    &#125;;</span><br><span class="line">    return (</span><br><span class="line">      &lt;React.Fragment&gt;</span><br><span class="line">        &#123;isVisible &amp;&amp; (</span><br><span class="line">          &lt;div id&#x3D;&#123;id&#125; style&#x3D;&#123;styles as CSSProperties&#125;&gt;</span><br><span class="line">            &lt;Dialog</span><br><span class="line">              title&#x3D;&#123;title&#125;</span><br><span class="line">              message&#x3D;&#123;message&#125;</span><br><span class="line">              icon&#x3D;&#123;renderIcon()&#125;</span><br><span class="line">              buttons&#x3D;&#123;[</span><br><span class="line">                &lt;Button onClick&#x3D;&#123;onClose&#125;&gt;取消&lt;&#x2F;Button&gt;,</span><br><span class="line">                &lt;Button color&#x3D;&quot;blue&quot; onClick&#x3D;&#123;onCheck&#125;&gt;</span><br><span class="line">                  确认</span><br><span class="line">                &lt;&#x2F;Button&gt;,</span><br><span class="line">              ]&#125;</span><br><span class="line">            &#x2F;&gt;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">        )&#125;</span><br><span class="line">      &lt;&#x2F;React.Fragment&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  return &#123;</span><br><span class="line">    openDialog,</span><br><span class="line">    closeDialog,</span><br><span class="line">    RenderDialog,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用也是一样的十分简单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import &#123; useDialog &#125; from &quot;..&#x2F;dialog&#x2F;index&quot;;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">const &#123; openDialog, closeDialog, RenderDialog &#125; &#x3D; useDialog();</span><br><span class="line">const [isClearDialogOpen, setClearDialogOpen] &#x3D; useState(false);</span><br><span class="line">useEffect(isClearDialogOpen ? openDialog : closeDialog, [isClearDialogOpen]);</span><br><span class="line"></span><br><span class="line">return (</span><br><span class="line">  &lt;React.Fragment&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;RenderDialog</span><br><span class="line">      width&#x3D;&#123;300&#125;</span><br><span class="line">      height&#x3D;&#123;120&#125;</span><br><span class="line">      id&#x3D;&quot;clear-dialog&quot;</span><br><span class="line">      title&#x3D;&quot;您确定要清空该画布吗？&quot;</span><br><span class="line">      message&#x3D;&quot;一旦清空将无法撤回。&quot;</span><br><span class="line">      imgSrc&#x3D;&#123;&quot;Drawing.png&quot;&#125;</span><br><span class="line">      onCheck&#x3D;&#123;checkClearDialog&#125;</span><br><span class="line">      onClose&#x3D;&#123;closeClearDialog&#125;</span><br><span class="line">    &gt;&lt;&#x2F;RenderDialog&gt;</span><br><span class="line">  &lt;&#x2F;React.Fragment&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>效果如下图：</p><p><img src="https://upload-images.jianshu.io/upload_images/7094266-131d24964ff76e17?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 确认清空</span><br><span class="line">const checkClearDialog &#x3D; useCallback(</span><br><span class="line">  (e) &#x3D;&gt; &#123;</span><br><span class="line">    clearRect(&#123;</span><br><span class="line">      x: 0,</span><br><span class="line">      y: 0,</span><br><span class="line">      width,</span><br><span class="line">      height,</span><br><span class="line">    &#125;);</span><br><span class="line">    setCanvasHistory([]);</span><br><span class="line">    setStep(-1);</span><br><span class="line">    closeClearDialog(e);</span><br><span class="line">    if (!backRef.current || !goRef.current) &#123;</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line">    const back: SVGSVGElement &#x3D; backRef.current;</span><br><span class="line">    const go: SVGSVGElement &#x3D; goRef.current;</span><br><span class="line">    back.classList.remove(&quot;active&quot;);</span><br><span class="line">    go.classList.remove(&quot;active&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">  [closeClearDialog, clearRect, width, height]</span><br><span class="line">);</span><br><span class="line">&#x2F;&#x2F; 取消</span><br><span class="line">const closeClearDialog &#x3D; useCallback(</span><br><span class="line">  (e) &#x3D;&gt; &#123;</span><br><span class="line">    setClearDialogOpen(false);</span><br><span class="line">  &#125;,</span><br><span class="line">  [setClearDialogOpen]</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>功能面板完。</p><p>至此，一个简约而不简单的画板就完成了。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>本篇文章梳理了仿 MacOS 桌面中画图工具的实现过程，代码及功能并不复杂但有很多值得注意的细节，希望通过该文章你能够掌握 React Hooks 基本用法及对 Canvas 有一定了解。</p><p>如果你喜欢这篇文章，不要忘了给我点赞（收藏永远比点赞多，可以像 B 站一样三连啊哈哈）。🍮</p>]]></content:encoded>
      
      <comments>https://github.com/Adashuai5/Adashuai5.github.io/2020/06/18/React-Hooks-TypeScript-%E5%81%9A%E4%B8%AA%E4%BB%BF-MacOS-%E6%A1%8C%E9%9D%A2%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9ACanvas-%E5%AE%9E%E7%8E%B0%E7%94%BB%E5%9B%BE%E5%B7%A5%E5%85%B7/#disqus_thread</comments>
    </item>
    
    <item>
      <title>React Hooks + TypeScript 做个仿 MacOS 桌面（三）：点击效果与弹窗</title>
      <link>https://github.com/Adashuai5/Adashuai5.github.io/2020/06/12/React-Hooks-TypeScript-%E5%81%9A%E4%B8%AA%E4%BB%BF-MacOS-%E6%A1%8C%E9%9D%A2%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E7%82%B9%E5%87%BB%E6%95%88%E6%9E%9C%E4%B8%8E%E5%BC%B9%E7%AA%97/</link>
      <guid>https://github.com/Adashuai5/Adashuai5.github.io/2020/06/12/React-Hooks-TypeScript-%E5%81%9A%E4%B8%AA%E4%BB%BF-MacOS-%E6%A1%8C%E9%9D%A2%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E7%82%B9%E5%87%BB%E6%95%88%E6%9E%9C%E4%B8%8E%E5%BC%B9%E7%AA%97/</guid>
      <pubDate>Fri, 12 Jun 2020 14:47:15 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;这是我的项目记录系列文章第三篇，目前项目进度有些停滞，主要是最近其他事情比较多加懒，于是我强行让自己在这几天对点击图标跳出弹窗这一过程进行优化，及时总结和记录，同时让大家知道我还活着。&lt;/p&gt;
&lt;p&gt;本篇将介绍目前项目当中，点击 Dock 图标所产生的系列效果，如生成可拖住
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>这是我的项目记录系列文章第三篇，目前项目进度有些停滞，主要是最近其他事情比较多加懒，于是我强行让自己在这几天对点击图标跳出弹窗这一过程进行优化，及时总结和记录，同时让大家知道我还活着。</p><p>本篇将介绍目前项目当中，点击 Dock 图标所产生的系列效果，如生成可拖住的弹窗等，目前只有计算器和画板等四个图标可用。</p><p>本文所有代码均在 <a href="https://github.com/Adashuai5/my-desktop">项目代码</a>，项目会一直优化，欢迎 watch 和 star。</p><h3 id="过程分析"><a href="#过程分析" class="headerlink" title="过程分析"></a>过程分析</h3><p>上篇我们已经实现 Dock 的动态效果，接下来我们肯定会不由自主想点图标。当我们点击图标，首先会出现图标弹跳的动效，然后出现图标对应应用弹框，并同时在图标下方出现高亮小圆点。接下来我会用画板 drawing 作为例子展示代码，关于画板的详细内容本篇暂不作介绍，预计会成为第四篇主角。</p><p>本文出现代码内容对应目录：</p><p><img src="https://upload-images.jianshu.io/upload_images/7094266-7efb9c6b79e2ac6f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="图标点击交互"><a href="#图标点击交互" class="headerlink" title="图标点击交互"></a>图标点击交互</h3><h4 id="动效实现"><a href="#动效实现" class="headerlink" title="动效实现"></a>动效实现</h4><p>当我们初次点击图标使其变成激活状态时，应该有交互动画：</p><p>这里我参考了 <a href="https://github.com/animate-css/animate.css/blob/master/source/attention_seekers/bounce.css">animate-css 的 bounce.css</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; footer&#x2F;index.scss</span><br><span class="line">@keyframes bounce &#123;</span><br><span class="line">  from,</span><br><span class="line">  20%,</span><br><span class="line">  53%,</span><br><span class="line">  to &#123;</span><br><span class="line">    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);</span><br><span class="line">    transform: translate3d(0, 0, 0);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  40%,</span><br><span class="line">  43% &#123;</span><br><span class="line">    animation-timing-function: cubic-bezier(0.755, 0.05, 0.855, 0.06);</span><br><span class="line">    transform: translate3d(0, -35px, 0) scaleY(1.1);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  70% &#123;</span><br><span class="line">    animation-timing-function: cubic-bezier(0.755, 0.05, 0.855, 0.06);</span><br><span class="line">    transform: translate3d(0, -35px, 0) scaleY(1.05);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  80% &#123;</span><br><span class="line">    transition-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);</span><br><span class="line">    transform: translate3d(0, 0, 0) scaleY(0.95);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  90% &#123;</span><br><span class="line">    transform: translate3d(0, -6px, 0) scaleY(1.02);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">.bounce &#123;</span><br><span class="line">  animation-duration: 2s;</span><br><span class="line">  animation-name: top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="isDrawingOpen（应用开启、关闭）和-isDrawingShow（应用展示、最小化）"><a href="#isDrawingOpen（应用开启、关闭）和-isDrawingShow（应用展示、最小化）" class="headerlink" title="isDrawingOpen（应用开启、关闭）和 isDrawingShow（应用展示、最小化）"></a>isDrawingOpen（应用开启、关闭）和 isDrawingShow（应用展示、最小化）</h4><p>给图标加上点击事件，通过其名字判断是哪个图标。每一个图标我们给到一个布尔值对象，如这里的 isDrawingOpen，它是个对象，里面记录一个布尔值 type，作为弹框开关（只有在打开和关闭应用时使用）；一个 index 记录图标对应顺序。</p><p>点击后给对应图标增加 .bounce，此时图标开始 bounce 动画，同时我们在 2.5s 后改变 type （画板出现）和记录 index，并且将类选择器移除，便于下次重新点击使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Footer.tsx</span><br><span class="line">interface OpenTypes &#123;</span><br><span class="line">  type: boolean;</span><br><span class="line">  index?: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const [isDrawingOpen, setDrawingOpen] &#x3D; useState&lt;OpenTypes&gt;(&#123;</span><br><span class="line">  type: false</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const [isDrawingShow, setDrawingShow] &#x3D; useState(true);</span><br><span class="line"></span><br><span class="line">const dockItemClick &#x3D; useCallback(</span><br><span class="line">  (item: string, index: number) &#x3D;&gt; &#123;</span><br><span class="line">    if (!dockRef.current) &#123;</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line">    const imgList &#x3D; dockRef.current.childNodes;</span><br><span class="line">    const img &#x3D; imgList[index] as HTMLDivElement;</span><br><span class="line">    switch (item) &#123;</span><br><span class="line">      case &quot;PrefApp.png&quot;:</span><br><span class="line">        if (!isDrawingOpen.type) &#123;</span><br><span class="line">          img.classList.add(&quot;bounce&quot;);</span><br><span class="line">          setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">            setDrawingOpen(&#123; type: !isDrawingOpen.type, index &#125;);</span><br><span class="line">            img.classList.remove(&quot;bounce&quot;);</span><br><span class="line">          &#125;, 2500);</span><br><span class="line">          return;</span><br><span class="line">        &#125;</span><br><span class="line">        setDrawingShow(!isDrawingShow);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  [isDrawingOpen, isDrawingShow]</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>与此同时可以看到有一个单独的布尔值：isDrawingShow，它的作用是在应用激活时点击图标或最小化按钮时切换展示状态。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">useEffect(() &#x3D;&gt; &#123;</span><br><span class="line">  if (!dockRef.current) &#123;</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line">  const imgList &#x3D; dockRef.current.childNodes;</span><br><span class="line">  [isDrawingOpen].forEach((item) &#x3D;&gt; &#123;</span><br><span class="line">    if (item.index) &#123;</span><br><span class="line">      const img &#x3D; imgList[item.index] as HTMLDivElement;</span><br><span class="line">      !item.type</span><br><span class="line">        ? setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">            img?.classList.remove(&quot;active&quot;);</span><br><span class="line">          &#125;, 1000)</span><br><span class="line">        : img.classList.add(&quot;active&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, [isDrawingOpen]);</span><br></pre></td></tr></table></figure><p>上面就是我们记录 index 的作用，由于关闭应用不受 Dock 控制，我们需要监听 isDrawingOpen 来判断是否加类选择器 active，它的作用主要是图标高亮小圆点的开关</p><h4 id="小圆点的实现"><a href="#小圆点的实现" class="headerlink" title="小圆点的实现"></a>小圆点的实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; footer&#x2F;index.scss</span><br><span class="line"></span><br><span class="line">#DockItem &#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  display: flex;</span><br><span class="line">  &amp;.active &#123;</span><br><span class="line">    &amp;::after &#123;</span><br><span class="line">      content: &quot;●&quot;;</span><br><span class="line">      font-size: 0.1em;</span><br><span class="line">      position: absolute;</span><br><span class="line">      bottom: -7px;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="createContext-实现组件通信："><a href="#createContext-实现组件通信：" class="headerlink" title="createContext 实现组件通信："></a>createContext 实现组件通信：</h4><p>这里我们的画板组件肯定是单独成文件的，因此开启和关闭弹窗操作就要用到组件通信。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">export const FooterContext &#x3D; createContext&lt;any&gt;([]);</span><br><span class="line">...</span><br><span class="line">return (</span><br><span class="line">   &lt;React.Fragment&gt;</span><br><span class="line">    &lt;FooterContext.Provider</span><br><span class="line">      value&#x3D;&#123;[isDrawingOpen, setDrawingOpen, isDrawingShow, setDrawingShow]&#125;</span><br><span class="line">      &gt;</span><br><span class="line">      &lt;Drawing &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;FooterContext.Provider&gt;</span><br><span class="line">    &lt;div ref&#x3D;&#123;dockRef&#125; style&#x3D;&#123;&#123; height: defaultWidth &#125;&#125;&gt;</span><br><span class="line">      &#123;dockList.map((item, index) &#x3D;&gt; &#123;</span><br><span class="line">        return (</span><br><span class="line">          &lt;div</span><br><span class="line">            id&#x3D;&quot;DockItem&quot;</span><br><span class="line">            style&#x3D;&#123;</span><br><span class="line">              &#123;</span><br><span class="line">                backgroundImage: &quot;url(&quot; + require(&quot;.&#x2F;image&#x2F;&quot; + item) + &quot;)&quot;,</span><br><span class="line">                backgroundPosition: &quot;center&quot;,</span><br><span class="line">                backgroundSize: &quot;cover&quot;,</span><br><span class="line">                backgroundRepeat: &quot;no-repeat&quot;,</span><br><span class="line">              &#125; as CSSProperties</span><br><span class="line">            &#125;</span><br><span class="line">            key&#x3D;&#123;index + item&#125;</span><br><span class="line">            onClick&#x3D;&#123;() &#x3D;&gt; dockItemClick(item, index)&#125;</span><br><span class="line">          &#x2F;&gt;</span><br><span class="line">        );</span><br><span class="line">      &#125;)&#125;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;React.Fragment&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>看过该系列 <a href="https://zhuanlan.zhihu.com/p/145449585" target="_blank" rel="noopener">第二篇</a> 的朋友或许还记得，之前我们的图标均为 img ，而现在改为了 div，其主要目的是为了配合 active 下的伪元素使用（img 使用 ::after 无效）。</p><p>我们通过 createContext 生成一个 FooterContext，像我们的 Drawing 子组件传递 [isDrawingOpen, setDrawingOpen, isDrawingShow, setDrawingShow] ，同时子组件可以调用 FooterContext，改变应用状态。</p><p>下面是子组件 Drawing 使用 FooterContext 的完整代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; drawing&#x2F;index.tsx</span><br><span class="line">import React, &#123; useContext, useEffect, useState, useCallback &#125; from &quot;react&quot;;</span><br><span class="line">import &#123; useModal &#125; from &quot;..&#x2F;modal&#x2F;UseModal&quot;;</span><br><span class="line">import &#123; FooterContext &#125; from &quot;..&#x2F;footer&#x2F;Footer&quot;;</span><br><span class="line">import &#123; TitleBar &#125; from &quot;react-desktop&#x2F;macOs&quot;;</span><br><span class="line">import Canvas from &quot;.&#x2F;Canvas&quot;;</span><br><span class="line">import &quot;.&#x2F;index.scss&quot;;</span><br><span class="line">&#x2F;&#x2F;&#x2F; &lt;reference path&#x3D;&quot;react-desktop.d.ts&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">export const Drawing &#x3D; React.memo(() &#x3D;&gt; &#123;</span><br><span class="line">  const &#123; open, close, RenderModal &#125; &#x3D; useModal();</span><br><span class="line">  const [</span><br><span class="line">    isDrawingOpen,</span><br><span class="line">    setDrawingOpen,</span><br><span class="line">    isDrawingShow,</span><br><span class="line">    setDrawingShow,</span><br><span class="line">  ] &#x3D; useContext(FooterContext);</span><br><span class="line">  const [style, setStyle] &#x3D; useState(&#123; width: 1200, height: 800 &#125;);</span><br><span class="line">  const [isFullscreen, setFullscreen] &#x3D; useState(false);</span><br><span class="line"></span><br><span class="line">  useEffect(isDrawingOpen.type ? open : close, [isDrawingOpen]);</span><br><span class="line">  const maximizeClick &#x3D; useCallback(() &#x3D;&gt; &#123;</span><br><span class="line">    if (isFullscreen) &#123;</span><br><span class="line">      setStyle(&#123; width: 1200, height: 800 &#125;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      setStyle(&#123; width: -1, height: -1 &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    setFullscreen(!isFullscreen);</span><br><span class="line">  &#125;, [isFullscreen]);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;RenderModal</span><br><span class="line">      data&#x3D;&#123;&#123;</span><br><span class="line">        width: style.width,</span><br><span class="line">        height: style.height,</span><br><span class="line">        id: &quot;DrawingView&quot;,</span><br><span class="line">        moveId: &quot;DrawingMove&quot;,</span><br><span class="line">        isShow: isDrawingShow,</span><br><span class="line">      &#125;&#125;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;div className&#x3D;&quot;drawing-wrapper&quot;&gt;</span><br><span class="line">        &lt;TitleBar</span><br><span class="line">          controls</span><br><span class="line">          id&#x3D;&quot;DrawingMove&quot;</span><br><span class="line">          isFullscreen&#x3D;&#123;isFullscreen&#125;</span><br><span class="line">          onCloseClick&#x3D;&#123;() &#x3D;&gt; &#123;</span><br><span class="line">            close();</span><br><span class="line">            setDrawingOpen(&#123; ...isDrawingOpen, type: false &#125;);</span><br><span class="line">          &#125;&#125;</span><br><span class="line">          onMinimizeClick&#x3D;&#123;() &#x3D;&gt; &#123;</span><br><span class="line">            setDrawingShow(false);</span><br><span class="line">          &#125;&#125;</span><br><span class="line">          onMaximizeClick&#x3D;&#123;maximizeClick&#125;</span><br><span class="line">          onResizeClick&#x3D;&#123;maximizeClick&#125;</span><br><span class="line">        &gt;&lt;&#x2F;TitleBar&gt;</span><br><span class="line">        &lt;Canvas</span><br><span class="line">          height&#x3D;&#123;isFullscreen ? document.body.clientHeight - 32 : style.height&#125;</span><br><span class="line">          width&#x3D;&#123;isFullscreen ? document.body.clientWidth : style.width&#125;</span><br><span class="line">        &#x2F;&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;RenderModal&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这里的 useModal 是一个弹框组件，下文详解。Canvas 是 drawing 的主体，这里我们不过多介绍。</p><h4 id="react-desktop-macOs-的使用及自定义声明文件"><a href="#react-desktop-macOs-的使用及自定义声明文件" class="headerlink" title="react-desktop/macOs 的使用及自定义声明文件"></a>react-desktop/macOs 的使用及自定义声明文件</h4><p>可以看到我使用了 <a href="https://reactdesktop.js.org/docs/mac-os/title-bar" target="_blank" rel="noopener">react-desktop/macOs</a> 组件，一个 react 的桌面 UI ，但是这个库没有 @types ，需要自己写 .d.ts:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; tsconfig.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;compilerOptions&quot;: &#123;</span><br><span class="line">    &quot;baseUrl&quot;: &quot;.&#x2F;&quot;,</span><br><span class="line">    &quot;target&quot;: &quot;es5&quot;,</span><br><span class="line">    &quot;lib&quot;: [&quot;dom&quot;, &quot;dom.iterable&quot;, &quot;esnext&quot;],</span><br><span class="line">    &quot;allowJs&quot;: true,</span><br><span class="line">    &quot;skipLibCheck&quot;: true,</span><br><span class="line">    &quot;esModuleInterop&quot;: true,</span><br><span class="line">    &quot;allowSyntheticDefaultImports&quot;: true,</span><br><span class="line">    &quot;strict&quot;: true,</span><br><span class="line">    &quot;forceConsistentCasingInFileNames&quot;: true,</span><br><span class="line">    &quot;module&quot;: &quot;esnext&quot;,</span><br><span class="line">    &quot;moduleResolution&quot;: &quot;node&quot;,</span><br><span class="line">    &quot;resolveJsonModule&quot;: true,</span><br><span class="line">    &quot;isolatedModules&quot;: true,</span><br><span class="line">    &quot;noEmit&quot;: true,</span><br><span class="line">    &quot;jsx&quot;: &quot;react&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;include&quot;: [&quot;src&quot;, &quot;typings&quot;] &#x2F;&#x2F; 主要是这里加了 typings</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; typings&#x2F;react-desktop.d.ts</span><br><span class="line">declare module &quot;react-desktop&#x2F;macOs&quot; &#123;</span><br><span class="line">  export const View: JSX;</span><br><span class="line">  export const Radio: JSX;</span><br><span class="line">  export const TitleBar: JSX;</span><br><span class="line">  export const Toolbar: JSX;</span><br><span class="line">  export const Text: JSX;</span><br><span class="line">  export const Box: JSX;</span><br><span class="line">  export const ListView: JSX;</span><br><span class="line">  export const ListViewRow: JSX;</span><br><span class="line">  export const Window: JSX;</span><br><span class="line">  export const Dialog: JSX;</span><br><span class="line">  export const Button: JSX;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后通过下面方式引入，就可以在 TypeScript 内使用了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F; &lt;reference path&#x3D;&quot;react-desktop.d.ts&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><h4 id="TitleBar"><a href="#TitleBar" class="headerlink" title="TitleBar"></a>TitleBar</h4><p>我们继续看我们的 drawing/index.tsx，这里主要用到了 TitleBar</p><p><img src="https://upload-images.jianshu.io/upload_images/7094266-743fed1cf7f3cde0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>可以看到 useModal 里释出了 open, close, RenderModal，其中 RenderModal 就是一会讲到的 弹窗，前两个就是控制弹窗的开关。</p><p>我们点击红色的关闭时，会调用父组件传过来的 isDrawingOpen, setDrawingOpen；而黄色的最小化按钮则调用 setDrawingShow(false)，这里我们直接设置为 false 因为再次展示是通过点击图标，最小化时高亮点不应该去除；maximizeClick 函数用于绿色最大化按钮，其中我用 width 和 height 是 -1 告诉 Modal 全屏，弹窗及其拖拽需要包括他俩再内的 data 所传递过去的值。</p><h3 id="用-Portal-实现弹窗组件"><a href="#用-Portal-实现弹窗组件" class="headerlink" title="用 Portal 实现弹窗组件"></a>用 Portal 实现弹窗组件</h3><p>项目的每个小应用本质上是个弹窗，因此实现一个可复用的组件十分必要，得益于 Portal ，我们能快速实现。<br>我直接复用了 <a href="https://juejin.im/post/5e774a1ae51d4527271ebc92#heading-7" target="_blank" rel="noopener">这篇文章</a> 里的 React Hooks 版本 Portal 实现方式。</p><h4 id="可拖拽弹窗："><a href="#可拖拽弹窗：" class="headerlink" title="可拖拽弹窗："></a>可拖拽弹窗：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 代码篇幅较长，可以先看上面参考博客内版本</span><br><span class="line">&#x2F;&#x2F; Modal.tsx</span><br><span class="line">import ReactDOM from &quot;react-dom&quot;;</span><br><span class="line">import React, &#123;</span><br><span class="line">  useState,</span><br><span class="line">  useCallback,</span><br><span class="line">  useMemo,</span><br><span class="line">  useEffect,</span><br><span class="line">  CSSProperties,</span><br><span class="line">&#125; from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">type Props &#x3D; &#123;</span><br><span class="line">  children: React.ReactChild;</span><br><span class="line">  closeModal: () &#x3D;&gt; void;</span><br><span class="line">  onDrag: (T: any) &#x3D;&gt; void;</span><br><span class="line">  onDragEnd: () &#x3D;&gt; void;</span><br><span class="line">  data: &#123;</span><br><span class="line">    width: number;</span><br><span class="line">    height: number;</span><br><span class="line">    id: string;</span><br><span class="line">    moveId: string;</span><br><span class="line">    isShow: boolean;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const Modal &#x3D; React.memo(</span><br><span class="line">  (&#123; children, closeModal, onDrag, onDragEnd, data &#125;: Props) &#x3D;&gt; &#123;</span><br><span class="line">    const domEl &#x3D; document.getElementById(&quot;main-view&quot;) as HTMLDivElement;</span><br><span class="line">    if (!domEl) return null;</span><br><span class="line">    const dragEl &#x3D; document.getElementById(data.id) as HTMLDivElement;</span><br><span class="line">    const moveEl &#x3D; document.getElementById(data.moveId) as HTMLDivElement;</span><br><span class="line">    const localPosition &#x3D; localStorage.getItem(data.id) || null;</span><br><span class="line">    const initPosition &#x3D; localPosition</span><br><span class="line">      ? JSON.parse(localPosition)</span><br><span class="line">      : &#123;</span><br><span class="line">          x: data.width &#x3D;&#x3D;&#x3D; -1 ? 0 : (window.innerWidth - data.width) &#x2F; 2,</span><br><span class="line">          y: data.height &#x3D;&#x3D;&#x3D; -1 ? 0 : (window.innerHeight - data.height) &#x2F; 2,</span><br><span class="line">        &#125;;</span><br><span class="line">    const [state, setState] &#x3D; useState(&#123;</span><br><span class="line">      isDragging: false,</span><br><span class="line">      origin: &#123; x: 0, y: 0 &#125;,</span><br><span class="line">      position: initPosition,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    const handleMouseDown &#x3D; useCallback((&#123; clientX, clientY &#125;) &#x3D;&gt; &#123;</span><br><span class="line">      setState((state) &#x3D;&gt; (&#123;</span><br><span class="line">        ...state,</span><br><span class="line">        isDragging: true,</span><br><span class="line">        origin: &#123;</span><br><span class="line">          x: clientX - state.position.x,</span><br><span class="line">          y: clientY - state.position.y,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;));</span><br><span class="line">    &#125;, []);</span><br><span class="line"></span><br><span class="line">    const handleMouseMove &#x3D; useCallback(</span><br><span class="line">      (&#123; clientX, clientY, target &#125;) &#x3D;&gt; &#123;</span><br><span class="line">        if (!state.isDragging || (moveEl &amp;&amp; target !&#x3D;&#x3D; moveEl)) return;</span><br><span class="line">        let x &#x3D; clientX - state.origin.x;</span><br><span class="line">        let y &#x3D; clientY - state.origin.y;</span><br><span class="line">        if (x &lt;&#x3D; 0) &#123;</span><br><span class="line">          x &#x3D; 0;</span><br><span class="line">        &#125; else if (x &gt; window.innerWidth - dragEl.offsetWidth) &#123;</span><br><span class="line">          x &#x3D; window.innerWidth - dragEl.offsetWidth;</span><br><span class="line">        &#125;</span><br><span class="line">        if (y &lt;&#x3D; 0) &#123;</span><br><span class="line">          y &#x3D; 0;</span><br><span class="line">        &#125; else if (y &gt; window.innerHeight - dragEl.offsetHeight) &#123;</span><br><span class="line">          y &#x3D; window.innerHeight - dragEl.offsetHeight;</span><br><span class="line">        &#125;</span><br><span class="line">        const newPosition &#x3D; &#123; x, y &#125;;</span><br><span class="line">        setState((state) &#x3D;&gt; (&#123;</span><br><span class="line">          ...state,</span><br><span class="line">          position: newPosition,</span><br><span class="line">        &#125;));</span><br><span class="line">        onDrag(&#123; newPosition, domEl &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">      [state.isDragging, state.origin, moveEl, dragEl, onDrag, domEl]</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    const handleMouseUp &#x3D; useCallback(() &#x3D;&gt; &#123;</span><br><span class="line">      if (state.isDragging) &#123;</span><br><span class="line">        setState((state) &#x3D;&gt; (&#123;</span><br><span class="line">          ...state,</span><br><span class="line">          isDragging: false,</span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line">        onDragEnd();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, [state.isDragging, onDragEnd]);</span><br><span class="line"></span><br><span class="line">    useEffect(() &#x3D;&gt; &#123;</span><br><span class="line">      if (data.width &#x3D;&#x3D;&#x3D; -1) &#123;</span><br><span class="line">        setState(&#123;</span><br><span class="line">          isDragging: false,</span><br><span class="line">          origin: &#123; x: 0, y: 0 &#125;,</span><br><span class="line">          position: &#123; x: 0, y: 0 &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, [data.width]);</span><br><span class="line"></span><br><span class="line">    useEffect(() &#x3D;&gt; &#123;</span><br><span class="line">      if (!domEl) return;</span><br><span class="line">      domEl.addEventListener(&quot;mousemove&quot;, handleMouseMove);</span><br><span class="line">      domEl.addEventListener(&quot;mouseup&quot;, handleMouseUp);</span><br><span class="line">      return () &#x3D;&gt; &#123;</span><br><span class="line">        domEl.removeEventListener(&quot;mousemove&quot;, handleMouseMove);</span><br><span class="line">        domEl.removeEventListener(&quot;mouseup&quot;, handleMouseUp);</span><br><span class="line">        if (data.width !&#x3D;&#x3D; -1) &#123;</span><br><span class="line">          localStorage.setItem(data.id, JSON.stringify(state.position));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;, [</span><br><span class="line">      domEl,</span><br><span class="line">      handleMouseMove,</span><br><span class="line">      handleMouseUp,</span><br><span class="line">      data.id,</span><br><span class="line">      data.width,</span><br><span class="line">      state.position,</span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    const styles &#x3D; useMemo(</span><br><span class="line">      () &#x3D;&gt; (&#123;</span><br><span class="line">        left: &#96;$&#123;state.position.x&#125;px&#96;,</span><br><span class="line">        top: &#96;$&#123;state.position.y&#125;px&#96;,</span><br><span class="line">        zIndex: state.isDragging ? 2 : 1,</span><br><span class="line">        display: data.isShow ? &quot;block&quot; : &quot;none&quot;,</span><br><span class="line">        position: &quot;absolute&quot;,</span><br><span class="line">      &#125;),</span><br><span class="line">      [state.isDragging, state.position, data.isShow]</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    return ReactDOM.createPortal(</span><br><span class="line">      &lt;div</span><br><span class="line">        style&#x3D;&#123;styles as CSSProperties&#125;</span><br><span class="line">        onMouseDown&#x3D;&#123;handleMouseDown&#125;</span><br><span class="line">        id&#x3D;&#123;data.id&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        &#123;children&#125;</span><br><span class="line">      &lt;&#x2F;div&gt;,</span><br><span class="line">      domEl</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>可以看到我在 Modal.tsx 中加入了拖拽的功能，代码篇幅很长，但原理其实比较简单，可以先看参考博客中的纯 Modal 版本后在看加入拖拽代码的版本。</p><p>这里我直接展示了完整代码，原本打算像第二篇讲动效那样介绍，但事实上两者思路十分相似，都是通过 useEffect 监听鼠标事件，那么我简单介绍下思路，便于理解：</p><p>首先我们看到有三个 dom 元素 domEl、dragEl 、moveEl：domEl 和参考文章中一样，主要是弹窗出现的 dom，我将它加在了 APP.tsx 内；dragEl 就代表了 应用主体 dom（这里就是 Drawing）；moveEl 则是应用组件内部可拖拽部分，一般是 TitleBar。</p><p>由于模拟应用，我们需要记录应用当前位置，所以用到了 localStorage，initPosition 初始化应用位置，通过 -1 判断是否全屏。</p><p>state 用于记录鼠标数据及是否可拖拽；handleMouseDown 记录下当前鼠标坐标，并开启拖拽；handleMouseMove 计算出移动位移，赋值给 position，需要注意边界情况，当然这里我简化了操作，直接不允许出屏了；handleMouseUp 关闭拖拽；closeModal, onDrag, onDragEnd 分别是弹窗内部关闭函数，可附加的拖拽事件和停止事件。<br>以上就是弹框组件及拖拽的主要思路了。</p><h4 id="UseModal"><a href="#UseModal" class="headerlink" title="UseModal"></a>UseModal</h4><p>UseModal 基本和文中一致：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; UseModal.tsx</span><br><span class="line">import React, &#123; useState &#125; from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">import Modal from &quot;.&#x2F;Modal&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Modal组件最基础的两个事件，open&#x2F;close</span><br><span class="line">export const useModal &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  const [isVisible, setIsVisible] &#x3D; useState(false);</span><br><span class="line"></span><br><span class="line">  const open &#x3D; () &#x3D;&gt; setIsVisible(true);</span><br><span class="line">  const close &#x3D; () &#x3D;&gt; setIsVisible(false);</span><br><span class="line"></span><br><span class="line">  const RenderModal &#x3D; (&#123;</span><br><span class="line">    children,</span><br><span class="line">    data,</span><br><span class="line">  &#125;: &#123;</span><br><span class="line">    children: React.ReactChild;</span><br><span class="line">    data: &#123;</span><br><span class="line">      width: number;</span><br><span class="line">      height: number;</span><br><span class="line">      id: string;</span><br><span class="line">      moveId: string;</span><br><span class="line">      isShow: boolean;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;) &#x3D;&gt; (</span><br><span class="line">    &lt;React.Fragment&gt;</span><br><span class="line">      &#123;isVisible &amp;&amp; (</span><br><span class="line">        &lt;Modal</span><br><span class="line">          data&#x3D;&#123;data&#125;</span><br><span class="line">          closeModal&#x3D;&#123;close&#125;</span><br><span class="line">          onDrag&#x3D;&#123;() &#x3D;&gt; console.log(&quot;onDrag&quot;)&#125;</span><br><span class="line">          onDragEnd&#x3D;&#123;() &#x3D;&gt; console.log(&quot;onDragEnd&quot;)&#125;</span><br><span class="line">        &gt;</span><br><span class="line">          &#123;children&#125;</span><br><span class="line">        &lt;&#x2F;Modal&gt;</span><br><span class="line">      )&#125;</span><br><span class="line">    &lt;&#x2F;React.Fragment&gt;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  return &#123;</span><br><span class="line">    open,</span><br><span class="line">    close,</span><br><span class="line">    RenderModal,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如何使用该组件我们上文已讲到，如果你忘了可以回看。</p><p>至此，我们已经完成了开篇的过程分析了。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>本篇文章介绍了项目从点击 Dock 呈现应用到关闭应用的过程实现，里面有较多细节，值得反复回味与优化。</p><p>此篇相对前两篇较长，能看到这里都是真爱（学习和我）。既然如此，不如给我点个赞吧 🍮。</p><p>目前该项目已完成部分功能，包括简单设置，基础计算器，基础画板等，即使是这些已有功能也有很多需要完善的地方。</p><p>后续我会慢慢优化，并在相应模块代码优化到一定程度时不定时更新系列文章。</p>]]></content:encoded>
      
      <comments>https://github.com/Adashuai5/Adashuai5.github.io/2020/06/12/React-Hooks-TypeScript-%E5%81%9A%E4%B8%AA%E4%BB%BF-MacOS-%E6%A1%8C%E9%9D%A2%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E7%82%B9%E5%87%BB%E6%95%88%E6%9E%9C%E4%B8%8E%E5%BC%B9%E7%AA%97/#disqus_thread</comments>
    </item>
    
    <item>
      <title>React Hooks + TypeScript 做个仿 MacOS 桌面（二）：实现 Dock 动效</title>
      <link>https://github.com/Adashuai5/Adashuai5.github.io/2020/06/05/React-Hooks-TypeScript-%E5%81%9A%E4%B8%AA%E4%BB%BF-MacOS-%E6%A1%8C%E9%9D%A2%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%AE%9E%E7%8E%B0-Dock-%E5%8A%A8%E6%95%88/</link>
      <guid>https://github.com/Adashuai5/Adashuai5.github.io/2020/06/05/React-Hooks-TypeScript-%E5%81%9A%E4%B8%AA%E4%BB%BF-MacOS-%E6%A1%8C%E9%9D%A2%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%AE%9E%E7%8E%B0-Dock-%E5%8A%A8%E6%95%88/</guid>
      <pubDate>Fri, 05 Jun 2020 14:46:06 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;这是我的项目记录系列文章第二篇，在上一篇我简单介绍了项目的初衷和流程等。现在这个项目已经做了一段时间，对 Hooks 和 TypeScript 也有了一定认识，相信优化和记录能有更多理解，同时可能收获大家的指导。&lt;/p&gt;
&lt;p&gt;本篇文章我将梳理 Mac 的 Dock 动效的
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>这是我的项目记录系列文章第二篇，在上一篇我简单介绍了项目的初衷和流程等。现在这个项目已经做了一段时间，对 Hooks 和 TypeScript 也有了一定认识，相信优化和记录能有更多理解，同时可能收获大家的指导。</p><p>本篇文章我将梳理 Mac 的 Dock 动效的实现过程，你可以在我的项目 <a href="https://github.com/Adashuai5/my-desktop">代码（欢迎 watch 和 star）</a>体验，同时本文完整代码均在 <a href="https://codesandbox.io/s/jovial-johnson-2rjnl?file=/src/Docker.tsx" target="_blank" rel="noopener">sandbox</a> 供你把玩。</p><h3 id="基础结构搭建"><a href="#基础结构搭建" class="headerlink" title="基础结构搭建"></a>基础结构搭建</h3><p>我们会在 app 文件下创建 footer，在其内部引入我们的 Docker 组件，我们找到几张图标 png ，以图标名组成 dockList 通过 require 引入在 Docker 内部，它们就是本次主角，同时通过使用 useRef 钩子给它们的父亲 div 绑定一个 ref，便于后续操作。</p><p>我们给每个图标一个默认宽度 defaultWidth，由此可得到背景 div 的宽度和高度。</p><p>这里背景 div 的宽度通过内部元素撑开，因此我们不必单独计算设定，原来我就又计算并设置了一遍宽度，多此一举，影响性能和体验。</p><p>但是高度需要设置一下，因为图标的高度会变化，我们需要保持背景高度不变。当然这里可以直接设置，setDockStyle 用不到，如 sandbox 里一样，但如需更改 Docker 位置，就需要用到 setDockStyle，在变换到左右侧时 height 更改为 width。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useState, useRef &#125; from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">export const Docker &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  const [defaultWidth] &#x3D; useState(76);</span><br><span class="line">  const [dockList] &#x3D; useState&lt;string[]&gt;([</span><br><span class="line">    &quot;Finder.png&quot;,</span><br><span class="line">    &quot;Launchpad.png&quot;,</span><br><span class="line">    &quot;PrefApp.png&quot;,</span><br><span class="line">    &quot;Chrome.png&quot;,</span><br><span class="line">    &quot;Terminal.png&quot;,</span><br><span class="line">    &quot;Calculator.png&quot;,</span><br><span class="line">    &quot;Drawing.png&quot;</span><br><span class="line">  ]);</span><br><span class="line">  const [dockStyle, setDockStyle] &#x3D; useState(&#123; height: defaultWidth &#125;);</span><br><span class="line">  const dockRef &#x3D; useRef&lt;HTMLDivElement&gt;(null);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div ref&#x3D;&#123;dockRef&#125; style&#x3D;&#123;dockStyle&#125;&gt;</span><br><span class="line">      &#123;dockList.map((item, index) &#x3D;&gt; &#123;</span><br><span class="line">        return (</span><br><span class="line">          &lt;img src&#x3D;&#123;require(&quot;.&#x2F;image&#x2F;&quot; + item)&#125; alt&#x3D;&#123;item&#125; key&#x3D;&#123;index + item&#125; &#x2F;&gt;</span><br><span class="line">        );</span><br><span class="line">      &#125;)&#125;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="初始化样式"><a href="#初始化样式" class="headerlink" title="初始化样式"></a>初始化样式</h3><p>这里主要是设定每个图片的默认宽度和背景 div 的宽度和高度</p><p>同时这里用了 mouseleave，事实上也是鼠标离开 Dock 事件所需函数（看下面就懂了）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const mouseleave &#x3D; useCallback(() &#x3D;&gt; &#123;</span><br><span class="line">  if (!dockRef.current) &#123;</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  const imgList &#x3D; dockRef.current.childNodes;</span><br><span class="line">  for (let i &#x3D; 0; i &lt; imgList.length; i++) &#123;</span><br><span class="line">    const img &#x3D; imgList[i] as HTMLImageElement;</span><br><span class="line">    img.width &#x3D; defaultWidth;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, [defaultWidth, dockList]);</span><br><span class="line"></span><br><span class="line">useEffect(() &#x3D;&gt; &#123;</span><br><span class="line">  mouseleave();</span><br><span class="line">&#125;, [mouseleave]);</span><br></pre></td></tr></table></figure><p>css 如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.App &#123;</span><br><span class="line">  footer&#123;</span><br><span class="line">    position: fixed;</span><br><span class="line">    bottom: 0;</span><br><span class="line">    width: 100vw;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    div&#123;</span><br><span class="line">      display: flex;</span><br><span class="line">      align-items: flex-end;</span><br><span class="line">      background-color: rgba(222, 223, 227, 0.7);</span><br><span class="line">      box-shadow: rgba(0, 0, 0, 0.31) 0px 0px 1px, rgba(0, 0, 0, 0.18) 0px 0px 5px,</span><br><span class="line">        rgba(0, 0, 0, 0.3) 0px 8px 50px;</span><br><span class="line">      border-top-left-radius: 0.4rem;</span><br><span class="line">      border-top-right-radius: 0.4rem;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认效果已经有了</p><p><img src="https://upload-images.jianshu.io/upload_images/7094266-48beb72925a7cbf1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="事件逻辑"><a href="#事件逻辑" class="headerlink" title="事件逻辑"></a>事件逻辑</h3><p>我们需要通过监听 Docker div 的鼠标进入和离开事件，一般我们使用 useCallback 缓存事件，同时使用 useEffect 作事件变化监听处理。mouseleave 我们已经在上面展示，不作展开。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">const mousemove &#x3D; useCallback(e &#x3D;&gt; &#123;</span><br><span class="line">  console.log(e);</span><br><span class="line">&#125;, []);</span><br><span class="line">const mouseleave &#x3D; useCallback(e &#x3D;&gt; &#123;</span><br><span class="line">  console.log(e);</span><br><span class="line">&#125;, []);</span><br><span class="line"></span><br><span class="line">useEffect(() &#x3D;&gt; &#123;</span><br><span class="line">  if (!dockRef.current) &#123;</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line">  const dockBackground: HTMLDivElement &#x3D; dockRef.current;</span><br><span class="line">  dockBackground.addEventListener(&quot;mousemove&quot;, mousemove);</span><br><span class="line">  dockBackground.addEventListener(&quot;mouseleave&quot;, mouseleave);</span><br><span class="line">  return () &#x3D;&gt; &#123;</span><br><span class="line">    dockBackground.removeEventListener(&quot;mousemove&quot;, mousemove);</span><br><span class="line">    dockBackground.removeEventListener(&quot;mouseleave&quot;, mouseleave);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;, [mousemove, mouseleave]);</span><br></pre></td></tr></table></figure><p>Docker 动效思路</p><p><img src="https://upload-images.jianshu.io/upload_images/7094266-9f3abba016d89cfb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>如图箭头，我们根据鼠标事件位置与各图标中心点距离来调整图标大小，通过该差值与设定宽度（这里我使用 Docker 的初始宽度）比值作为图标放大参考，这里我使用的放大倍数为 2，直接看代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">const getOffset &#x3D; useCallback(</span><br><span class="line">  (el: HTMLElement, offset: &quot;top&quot; | &quot;left&quot;): number &#x3D;&gt; &#123;</span><br><span class="line">    const elOffset &#x3D; offset &#x3D;&#x3D;&#x3D; &quot;top&quot; ? el.offsetTop : el.offsetLeft;</span><br><span class="line">    if (el.offsetParent &#x3D;&#x3D; null) &#123;</span><br><span class="line">      return elOffset;</span><br><span class="line">    &#125;</span><br><span class="line">    return elOffset + getOffset(el.offsetParent as HTMLElement, offset);</span><br><span class="line">  &#125;,</span><br><span class="line">  []</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">const mousemove &#x3D; useCallback(</span><br><span class="line">  (&#123; clientX, clientY &#125;) &#x3D;&gt; &#123;</span><br><span class="line">    if (!dockRef.current) &#123;</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line">    const imgList &#x3D; dockRef.current.childNodes;</span><br><span class="line">    for (let i &#x3D; 0; i &lt; imgList.length; i++) &#123;</span><br><span class="line">      const img &#x3D; imgList[i] as HTMLImageElement;</span><br><span class="line">      const x &#x3D; img.offsetLeft + defaultWidth &#x2F; 2 - clientX;</span><br><span class="line">      const y &#x3D;</span><br><span class="line">        img.offsetTop +</span><br><span class="line">        getOffset(dockRef.current, &quot;top&quot;) +</span><br><span class="line">        img.offsetHeight &#x2F; 2 -</span><br><span class="line">        clientY;</span><br><span class="line">      let imgScale &#x3D;</span><br><span class="line">        1 - Math.sqrt(x * x + y * y) &#x2F; (imgList.length * defaultWidth);</span><br><span class="line">      if (imgScale &lt; 0.5) &#123;</span><br><span class="line">        imgScale &#x3D; 0.5;</span><br><span class="line">      &#125;</span><br><span class="line">      img.width &#x3D; defaultWidth * 2 * imgScale;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  [defaultWidth, getOffset]</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>至此，Docker 动效就完成了。我们还可以通过修改 defaultWidth 来调整图标大小，当然还有动效放大倍数 imgScale，甚至 Docker 位置，做到与 Mac 桌面一样，这也正式我的项目在做的东西。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>在写这篇文章的同时，也对代码和过程有了梳理，目前该项目已完成部分功能，包括简单设置，基础计算器，基础画板等，即使是这些已有功能也有很多需要完善的地方。</p><p>后续我会慢慢优化，并在相应模块代码优化到一定程度时不定时更新系列文章。</p><p>如果你喜欢这篇文章，不要忘了给我点赞。🍮</p><p><strong>本文参考</strong>：<br><a href="https://www.cnblogs.com/milly/p/dock-effect.html" target="_blank" rel="noopener">Mac Dock 效果及原理（勾股定理）</a></p>]]></content:encoded>
      
      <comments>https://github.com/Adashuai5/Adashuai5.github.io/2020/06/05/React-Hooks-TypeScript-%E5%81%9A%E4%B8%AA%E4%BB%BF-MacOS-%E6%A1%8C%E9%9D%A2%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%AE%9E%E7%8E%B0-Dock-%E5%8A%A8%E6%95%88/#disqus_thread</comments>
    </item>
    
    <item>
      <title>React Hooks + TypeScript 做个仿 MacOS 桌面（一）：项目初始化</title>
      <link>https://github.com/Adashuai5/Adashuai5.github.io/2020/05/29/React-Hooks-TypeScript-%E5%81%9A%E4%B8%AA%E4%BB%BF-MacOS-%E6%A1%8C%E9%9D%A2%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96/</link>
      <guid>https://github.com/Adashuai5/Adashuai5.github.io/2020/05/29/React-Hooks-TypeScript-%E5%81%9A%E4%B8%AA%E4%BB%BF-MacOS-%E6%A1%8C%E9%9D%A2%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96/</guid>
      <pubDate>Fri, 29 May 2020 14:39:41 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;项目初衷&quot;&gt;&lt;a href=&quot;#项目初衷&quot; class=&quot;headerlink&quot; title=&quot;项目初衷&quot;&gt;&lt;/a&gt;项目初衷&lt;/h3&gt;&lt;p&gt;0 做个有特点的前端项目，而 MacOS 系统桌面可以实现的东西太多了&lt;/p&gt;
&lt;p&gt;1 工作中主要技术栈为 vue2.x，
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h3 id="项目初衷"><a href="#项目初衷" class="headerlink" title="项目初衷"></a>项目初衷</h3><p>0 做个有特点的前端项目，而 MacOS 系统桌面可以实现的东西太多了</p><p>1 工作中主要技术栈为 vue2.x，想通过项目实践 react 的学习（hooks 熟练了，react 和 vue3.0 都间接拿下了）</p><p>2 熟悉并实践 TypeScript</p><h3 id="附属"><a href="#附属" class="headerlink" title="附属"></a>附属</h3><p>我的电脑其实不是 macOS 系统，所以注定只能低仿。但这不影响我学习 macOS 如 dock 的炫酷效果的实现及达到上述初衷的目的。</p><p>通过该 <a href="https://www.bilibili.com/video/BV12t411g7Zv/" target="_blank" rel="noopener">教程</a> 修改了我的桌面，作为参考</p><p><a href="https://www.mydockfinder.com/index.html#time=9&NewVariable1=1&CSUM=1" target="_blank" rel="noopener">主要软件 mydockfinder</a></p><h3 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h3><p>直接使用 create-react-app with typescript 来快速搭建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn create-react-app my-app --typescript</span><br></pre></td></tr></table></figure><p>引入 sass 为 css 预处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add node-sass</span><br></pre></td></tr></table></figure><h3 id="设置背景图片"><a href="#设置背景图片" class="headerlink" title="设置背景图片"></a>设置背景图片</h3><p>删除所有不必要的文件及代码后, 我使用上面教程中获取的文件中的 sierra-4K.jpg 作为 App 界面背景</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; App.scss</span><br><span class="line">.App &#123;</span><br><span class="line">  min-width: 1500px;</span><br><span class="line">  background: url(..&#x2F;assets&#x2F;image&#x2F;sierra-4K.jpg) center&#x2F;100% no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下</p><p><img src="https://upload-images.jianshu.io/upload_images/7094266-9b33e3cc2cd4e3d3?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="使用-Github-自动化部署"><a href="#使用-Github-自动化部署" class="headerlink" title="使用 Github 自动化部署"></a>使用 Github 自动化部署</h3><p><a href="https://create-react-app.dev/docs/deployment/#github-pages" target="_blank" rel="noopener">Create React App 官方文档提供的部署到 github</a> 的方法有问题</p><p>我使用了 GitHub Actions 代替 <a href="https://frankwang1991.github.io/2019/11/21/use-github-actions-publish-reactapp/" target="_blank" rel="noopener">参考</a></p><p>在 package.json 内添加 homepage</p><p>格式：https://{yourGithubName}.github.io/{yourRepositoryName}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; package.json</span><br><span class="line">&#x2F;&#x2F; ...</span><br><span class="line">  ,</span><br><span class="line">  &quot;homepage&quot;: &quot;https:&#x2F;&#x2F;adashuai5.github.io&#x2F;my-desktop&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; ...</span><br></pre></td></tr></table></figure><p>新建项目文件 .github/workflows/ci.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">name: my-desktop</span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">      - master</span><br><span class="line">jobs:</span><br><span class="line">  build-and-deploy:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">      - name: Checkout</span><br><span class="line">        uses: actions&#x2F;checkout@master</span><br><span class="line"></span><br><span class="line">      - name: Build and Deploy</span><br><span class="line">        uses: JamesIves&#x2F;github-pages-deploy-action@master</span><br><span class="line">        env:</span><br><span class="line">          ACCESS_TOKEN: $&#123;&#123; secrets.MY_WINDOW &#125;&#125;</span><br><span class="line">          BRANCH: gh-pages</span><br><span class="line">          FOLDER: build</span><br><span class="line">          BUILD_SCRIPT: npm install &amp;&amp; npm run build</span><br></pre></td></tr></table></figure><p>这里的 ACCESS_TOKEN 是在 Github repo 中 Settings 栏下设置的 Secrets</p><p><img src="https://upload-images.jianshu.io/upload_images/7094266-f72d9e80d88d5353?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>做好这些，在你每次 push 后 Github 就会自动运行 Actions 形成工作流了</p><p><img src="https://upload-images.jianshu.io/upload_images/7094266-434d2834287ed33f?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>等你的 push 成功，即可打开 Settings，找到 Github Pages</p><p><img src="https://upload-images.jianshu.io/upload_images/7094266-d2d3766e96f83718?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>选择 gh-pages branch 此时会出现如上图所示项目浏览链接，如我这个项目 <a href="https://adashuai5.github.io/my-desktop/" target="_blank" rel="noopener">my-desktop</a></p><p>另外，该项目 <a href="https://github.com/Adashuai5/my-desktop">代码</a>，欢迎 watch 和 star。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>至此，项目流程算是走了一遍。</p><p>目前该项目已完成 dock，简单设置，基础计算器，基础画板等功能，即使是这些已有功能也有很多需要完善的地方。</p><p>后续我会慢慢优化，并在相应模块代码优化到一定程度时不定时更新系列文章。🍮</p>]]></content:encoded>
      
      <comments>https://github.com/Adashuai5/Adashuai5.github.io/2020/05/29/React-Hooks-TypeScript-%E5%81%9A%E4%B8%AA%E4%BB%BF-MacOS-%E6%A1%8C%E9%9D%A2%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96/#disqus_thread</comments>
    </item>
    
    <item>
      <title>【经验总结】vue + element-ui 踩坑—— table 篇</title>
      <link>https://github.com/Adashuai5/Adashuai5.github.io/2020/05/01/%E3%80%90%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%E3%80%91vue-element-ui-%E8%B8%A9%E5%9D%91%E2%80%94%E2%80%94-table-%E7%AF%87/</link>
      <guid>https://github.com/Adashuai5/Adashuai5.github.io/2020/05/01/%E3%80%90%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%E3%80%91vue-element-ui-%E8%B8%A9%E5%9D%91%E2%80%94%E2%80%94-table-%E7%AF%87/</guid>
      <pubDate>Fri, 01 May 2020 12:52:15 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;工作一年，主要职责是负责公司后台管理平台的开发与维护。此间面对各种业务需求，通过面向谷歌编程等常见方式，积累了一些微不足道的经验。&lt;/p&gt;
&lt;p&gt;本篇为总结的第一篇（也许有其他篇）—— table 篇&lt;/p&gt;
&lt;p&gt;对于后台管理平台来说，最必不可少的元素就是 table 表
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>工作一年，主要职责是负责公司后台管理平台的开发与维护。此间面对各种业务需求，通过面向谷歌编程等常见方式，积累了一些微不足道的经验。</p><p>本篇为总结的第一篇（也许有其他篇）—— table 篇</p><p>对于后台管理平台来说，最必不可少的元素就是 table 表格，几乎每个页面都涉及到表格的使用，甚至常作为是页面的主体部分。<br>因此，如何维护这些 table，并且根据业务需求完善不同解决方案，便是此文所会表达的内容。</p><p>主要技术栈如题为 vue 全家桶配合 element-ui（其他技术栈其实思路是类似的），因此主要还是对 el-table 等的再封装等。element-ui 的文档已经非常通俗易懂，本文不涉及一些文档上已有的基本用法。</p><p>接下来我会模拟一些简单的数据来展示一些业务问题的解决方案，其目的在展示思路，代码以简易为主。</p><h1 id="1-自定义列表项"><a href="#1-自定义列表项" class="headerlink" title="1. 自定义列表项"></a>1. 自定义列表项</h1><p>很多时候我们需要将后端数据作展示优化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; mock 数据（跳过直接往下看）</span><br><span class="line">tableData: [</span><br><span class="line">  &#123;</span><br><span class="line">    id: &quot;12987122&quot;,</span><br><span class="line">    name1: &quot;王小虎&quot;,</span><br><span class="line">    name2: &quot;王小虎&quot;,</span><br><span class="line">    name3: &quot;王小虎&quot;,</span><br><span class="line">    address1: &quot;上海市普陀区金沙江路 1518 弄&quot;,</span><br><span class="line">    address2: &quot;上海市普陀区金沙江路 1518 弄&quot;,</span><br><span class="line">    address3: &quot;上海市普陀区金沙江路 1518 弄&quot;,</span><br><span class="line">    amount1: &quot;234&quot;,</span><br><span class="line">    amount2: &quot;3.2&quot;,</span><br><span class="line">    amount3: 10,</span><br><span class="line">    amount4: &quot;4.43&quot;,</span><br><span class="line">    amount5: 12</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: &quot;12987123&quot;,</span><br><span class="line">    name1: &quot;王小虎&quot;,</span><br><span class="line">    name2: &quot;王小虎&quot;,</span><br><span class="line">    name3: &quot;王小虎&quot;,</span><br><span class="line">    address1: &quot;上海市普陀区金沙江路 1518 弄&quot;,</span><br><span class="line">    address2: &quot;上海市普陀区金沙江路 1518 弄&quot;,</span><br><span class="line">    address3: &quot;上海市普陀区金沙江路 1518 弄&quot;,</span><br><span class="line">    amount1: &quot;165&quot;,</span><br><span class="line">    amount2: &quot;4.43&quot;,</span><br><span class="line">    amount3: 12,</span><br><span class="line">    amount4: &quot;4.43&quot;,</span><br><span class="line">    amount5: 12</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: &quot;12987124&quot;,</span><br><span class="line">    name1: &quot;王小虎&quot;,</span><br><span class="line">    name2: &quot;王小虎&quot;,</span><br><span class="line">    name3: &quot;王小虎&quot;,</span><br><span class="line">    address1: &quot;上海市普陀区金沙江路 1518 弄&quot;,</span><br><span class="line">    address2: &quot;上海市普陀区金沙江路 1518 弄&quot;,</span><br><span class="line">    address3: &quot;上海市普陀区金沙江路 1518 弄&quot;,</span><br><span class="line">    amount1: &quot;324&quot;,</span><br><span class="line">    amount2: &quot;1.9&quot;,</span><br><span class="line">    amount3: 9,</span><br><span class="line">    amount4: &quot;4.43&quot;,</span><br><span class="line">    amount5: 12</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: &quot;12987125&quot;,</span><br><span class="line">    name1: &quot;王小虎&quot;,</span><br><span class="line">    name2: &quot;王小虎&quot;,</span><br><span class="line">    name3: &quot;王小虎&quot;,</span><br><span class="line">    address1: &quot;上海市普陀区金沙江路 1518 弄&quot;,</span><br><span class="line">    address2: &quot;上海市普陀区金沙江路 1518 弄&quot;,</span><br><span class="line">    address3: &quot;上海市普陀区金沙江路 1518 弄&quot;,</span><br><span class="line">    amount1: &quot;621&quot;,</span><br><span class="line">    amount2: &quot;2.2&quot;,</span><br><span class="line">    amount3: 17,</span><br><span class="line">    amount4: &quot;4.43&quot;,</span><br><span class="line">    amount5: 12</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: &quot;12987126&quot;,</span><br><span class="line">    name1: &quot;王小虎&quot;,</span><br><span class="line">    name2: &quot;王小虎&quot;,</span><br><span class="line">    name3: &quot;王小虎&quot;,</span><br><span class="line">    address1: &quot;上海市普陀区金沙江路 1518 弄&quot;,</span><br><span class="line">    address2: &quot;上海市普陀区金沙江路 1518 弄&quot;,</span><br><span class="line">    address3: &quot;上海市普陀区金沙江路 1518 弄&quot;,</span><br><span class="line">    amount1: &quot;539&quot;,</span><br><span class="line">    amount2: &quot;4.1&quot;,</span><br><span class="line">    amount3: 15,</span><br><span class="line">    amount4: &quot;4.43&quot;,</span><br><span class="line">    amount5: 12</span><br><span class="line">  &#125;</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>本次 table 数据以上面数据模拟后端传值。我们除了要展示这些字段，还要将后面 5 个 数据作相除或求百分比等，常规写法如下（不用细看）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-table</span><br><span class="line">  class&#x3D;&quot;table&quot;</span><br><span class="line">  :data&#x3D;&quot;tableData&quot;</span><br><span class="line">  border</span><br><span class="line">  show-summary</span><br><span class="line">  highlight-current-row</span><br><span class="line">  style&#x3D;&quot;width: 100%&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;el-table-column prop&#x3D;&quot;id&quot; label&#x3D;&quot;ID&quot; width&#x3D;&quot;180&quot;&gt;&lt;&#x2F;el-table-column&gt;</span><br><span class="line">  &lt;el-table-column prop&#x3D;&quot;name1&quot; label&#x3D;&quot;姓名1&quot; width&#x3D;&quot;100&quot;&gt;&lt;&#x2F;el-table-column&gt;</span><br><span class="line">  &lt;el-table-column prop&#x3D;&quot;name2&quot; label&#x3D;&quot;姓名2&quot; width&#x3D;&quot;100&quot;&gt;&lt;&#x2F;el-table-column&gt;</span><br><span class="line">  &lt;el-table-column prop&#x3D;&quot;name3&quot; label&#x3D;&quot;姓名3&quot; width&#x3D;&quot;100&quot;&gt;&lt;&#x2F;el-table-column&gt;</span><br><span class="line">  &lt;el-table-column prop&#x3D;&quot;address1&quot; label&#x3D;&quot;地址1&quot; width&#x3D;&quot;180&quot; show-overflow-tooltip&gt;&lt;&#x2F;el-table-column&gt;</span><br><span class="line">  &lt;el-table-column prop&#x3D;&quot;address2&quot; label&#x3D;&quot;地址2&quot; width&#x3D;&quot;180&quot; show-overflow-tooltip&gt;&lt;&#x2F;el-table-column&gt;</span><br><span class="line">  &lt;el-table-column prop&#x3D;&quot;address3&quot; label&#x3D;&quot;地址3&quot; width&#x3D;&quot;180&quot; show-overflow-tooltip&gt;&lt;&#x2F;el-table-column&gt;</span><br><span class="line">  &lt;el-table-column prop&#x3D;&quot;amount1&quot; sortable label&#x3D;&quot;数值1&quot;&gt;&lt;&#x2F;el-table-column&gt;</span><br><span class="line">  &lt;el-table-column prop&#x3D;&quot;amount2&quot; sortable label&#x3D;&quot;数值2&quot;&gt;&lt;&#x2F;el-table-column&gt;</span><br><span class="line">  &lt;el-table-column prop&#x3D;&quot;amount3&quot; sortable label&#x3D;&quot;数值3&quot;&gt;&lt;&#x2F;el-table-column&gt;</span><br><span class="line">  &lt;el-table-column prop&#x3D;&quot;amount4&quot; sortable label&#x3D;&quot;数值4&quot;&gt;&lt;&#x2F;el-table-column&gt;</span><br><span class="line">  &lt;el-table-column prop&#x3D;&quot;amount5&quot; sortable label&#x3D;&quot;数值5&quot;&gt;&lt;&#x2F;el-table-column&gt;</span><br><span class="line">  &lt;el-table-column prop&#x3D;&quot;amount6&quot; sortable label&#x3D;&quot;数值6&quot;&gt;</span><br><span class="line">    &lt;template slot-scope&#x3D;&quot;scope&quot;&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123;toFixedTwo(scope.row.amount1, scope.row.amount2)&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;span&gt;</span><br><span class="line">    &lt;&#x2F;template&gt;</span><br><span class="line">  &lt;&#x2F;el-table-column&gt;</span><br><span class="line">  &lt;el-table-column prop&#x3D;&quot;amount7&quot; sortable label&#x3D;&quot;数值7&quot;&gt;</span><br><span class="line">    &lt;template slot-scope&#x3D;&quot;scope&quot;&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123;toFixedTwo(scope.row.amount1, scope.row.amount3)&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;span&gt;</span><br><span class="line">    &lt;&#x2F;template&gt;</span><br><span class="line">  &lt;&#x2F;el-table-column&gt;</span><br><span class="line">  &lt;el-table-column prop&#x3D;&quot;amount8&quot; sortable label&#x3D;&quot;数值8&quot;&gt;</span><br><span class="line">    &lt;template slot-scope&#x3D;&quot;scope&quot;&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123;toFixedTwo(scope.row.amount1, scope.row.amount4)&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;span&gt;</span><br><span class="line">    &lt;&#x2F;template&gt;</span><br><span class="line">  &lt;&#x2F;el-table-column&gt;</span><br><span class="line">  &lt;el-table-column prop&#x3D;&quot;amount9&quot; sortable label&#x3D;&quot;数值9&quot;&gt;</span><br><span class="line">    &lt;template slot-scope&#x3D;&quot;scope&quot;&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123;toFixedTwo(scope.row.amount1, scope.row.amount5)&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;span&gt;</span><br><span class="line">    &lt;&#x2F;template&gt;</span><br><span class="line">  &lt;&#x2F;el-table-column&gt;</span><br><span class="line">  &lt;el-table-column prop&#x3D;&quot;amount10&quot; sortable label&#x3D;&quot;数值10&quot;&gt;</span><br><span class="line">    &lt;template slot-scope&#x3D;&quot;scope&quot;&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123;toPercent(scope.row.amount1, scope.row.amount2)&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;span&gt;</span><br><span class="line">    &lt;&#x2F;template&gt;</span><br><span class="line">  &lt;&#x2F;el-table-column&gt;</span><br><span class="line">  &lt;el-table-column prop&#x3D;&quot;amount11&quot; sortable label&#x3D;&quot;数值11&quot;&gt;</span><br><span class="line">    &lt;template slot-scope&#x3D;&quot;scope&quot;&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123;toPercent(scope.row.amount1, scope.row.amount3)&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;span&gt;</span><br><span class="line">    &lt;&#x2F;template&gt;</span><br><span class="line">  &lt;&#x2F;el-table-column&gt;</span><br><span class="line">  &lt;el-table-column prop&#x3D;&quot;amount12&quot; sortable label&#x3D;&quot;数值12&quot;&gt;</span><br><span class="line">    &lt;template slot-scope&#x3D;&quot;scope&quot;&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123;toPercent(scope.row.amount1, scope.row.amount4)&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;span&gt;</span><br><span class="line">    &lt;&#x2F;template&gt;</span><br><span class="line">  &lt;&#x2F;el-table-column&gt;</span><br><span class="line">  &lt;el-table-column prop&#x3D;&quot;amount13&quot; sortable label&#x3D;&quot;数值13&quot;&gt;</span><br><span class="line">    &lt;template slot-scope&#x3D;&quot;scope&quot;&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123;toPercent(scope.row.amount1, scope.row.amount5)&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;span&gt;</span><br><span class="line">    &lt;&#x2F;template&gt;</span><br><span class="line">  &lt;&#x2F;el-table-column&gt;</span><br><span class="line">&lt;&#x2F;el-table&gt;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/7094266-f61e03deca5b00a3?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>可以看到，仅仅是这十来个字段，就让页面显得非常臃肿，而且很多重复，可想而知如果字段增致几十上百，展示方式更加繁琐，开发维护不易。</p><h2 id="用表驱动编程进行优化"><a href="#用表驱动编程进行优化" class="headerlink" title="用表驱动编程进行优化"></a>用表驱动编程进行优化</h2><p>表驱动法是《代码大全》里面提到编程方法，适用于多个 if-else 这样形式的代码，这里自然十分适用。</p><p>demo 代码的目录结构</p><p><img src="https://upload-images.jianshu.io/upload_images/7094266-42cc6104f08880a9?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="tableData-js"><a href="#tableData-js" class="headerlink" title="tableData.js"></a>tableData.js</h3><p>将要展示的字段按顺序，以一定参数形式的数组结构放在 <code>TABLE_DATA_MAP</code> 对象内，如目前仅有的 tableDemo 即表示为我们上面代码的表结构数组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> *  参数作用说明：</span><br><span class="line"> *      key: 展示字段</span><br><span class="line"> *      label: 列头名称</span><br><span class="line"> *      width: 列宽</span><br><span class="line"> *      sortable: 是否可筛选</span><br><span class="line"> *      hidden: 隐藏默认展示字段</span><br><span class="line"> *      Dict: 展示用字典</span><br><span class="line"> *      isFixedTwo: 保留两位（可配合分子&#x2F;分母使用）</span><br><span class="line"> *      isPercent: 百分号展示（配合分子&#x2F;分母使用）</span><br><span class="line"> *      molecule: 分子</span><br><span class="line"> *      denominator: 分母</span><br><span class="line"> **&#x2F;</span><br><span class="line"></span><br><span class="line">export const TABLE_DATA_MAP &#x3D; &#123;</span><br><span class="line">  tableDemo: [</span><br><span class="line">    &#123;</span><br><span class="line">      key: &quot;name1&quot;,</span><br><span class="line">      label: &quot;姓名1&quot;,</span><br><span class="line">      width: 100,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      key: &quot;name2&quot;,</span><br><span class="line">      label: &quot;姓名2&quot;,</span><br><span class="line">      width: 100,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      key: &quot;name3&quot;,</span><br><span class="line">      label: &quot;姓名3&quot;,</span><br><span class="line">      width: 100,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      key: &quot;address1&quot;,</span><br><span class="line">      label: &quot;地址1&quot;,</span><br><span class="line">      width: 180,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      key: &quot;address2&quot;,</span><br><span class="line">      label: &quot;地址2&quot;,</span><br><span class="line">      width: 180,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      key: &quot;address3&quot;,</span><br><span class="line">      label: &quot;地址3&quot;,</span><br><span class="line">      width: 180,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      key: &quot;amount1&quot;,</span><br><span class="line">      label: &quot;数值1&quot;,</span><br><span class="line">      width: 100,</span><br><span class="line">      sortable: true,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      key: &quot;amount2&quot;,</span><br><span class="line">      label: &quot;数值2&quot;,</span><br><span class="line">      width: 100,</span><br><span class="line">      sortable: true,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      key: &quot;amount3&quot;,</span><br><span class="line">      label: &quot;数值3&quot;,</span><br><span class="line">      width: 100,</span><br><span class="line">      sortable: true,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      key: &quot;amount4&quot;,</span><br><span class="line">      label: &quot;数值4&quot;,</span><br><span class="line">      width: 100,</span><br><span class="line">      sortable: true,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      key: &quot;amount5&quot;,</span><br><span class="line">      label: &quot;数值5&quot;,</span><br><span class="line">      width: 100,</span><br><span class="line">      sortable: true,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      key: &quot;amount6&quot;,</span><br><span class="line">      molecule: &quot;amount1&quot;,</span><br><span class="line">      denominator: &quot;amount2&quot;,</span><br><span class="line">      label: &quot;数值6&quot;,</span><br><span class="line">      width: 100,</span><br><span class="line">      sortable: true,</span><br><span class="line">      isFixedTwo: true,</span><br><span class="line">      hidden: true,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      key: &quot;amount7&quot;,</span><br><span class="line">      molecule: &quot;amount1&quot;,</span><br><span class="line">      denominator: &quot;amount3&quot;,</span><br><span class="line">      label: &quot;数值7&quot;,</span><br><span class="line">      width: 100,</span><br><span class="line">      sortable: true,</span><br><span class="line">      isFixedTwo: true,</span><br><span class="line">      hidden: true,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      key: &quot;amount8&quot;,</span><br><span class="line">      molecule: &quot;amount1&quot;,</span><br><span class="line">      denominator: &quot;amount4&quot;,</span><br><span class="line">      label: &quot;数值8&quot;,</span><br><span class="line">      width: 100,</span><br><span class="line">      sortable: true,</span><br><span class="line">      isFixedTwo: true,</span><br><span class="line">      hidden: true,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      key: &quot;amount9&quot;,</span><br><span class="line">      molecule: &quot;amount1&quot;,</span><br><span class="line">      denominator: &quot;amount5&quot;,</span><br><span class="line">      label: &quot;数值9&quot;,</span><br><span class="line">      width: 100,</span><br><span class="line">      sortable: true,</span><br><span class="line">      isFixedTwo: true,</span><br><span class="line">      hidden: true,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      key: &quot;amount10&quot;,</span><br><span class="line">      molecule: &quot;amount1&quot;,</span><br><span class="line">      denominator: &quot;amount2&quot;,</span><br><span class="line">      label: &quot;数值10&quot;,</span><br><span class="line">      width: 100,</span><br><span class="line">      sortable: true,</span><br><span class="line">      isPercent: true,</span><br><span class="line">      hidden: true,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      key: &quot;amount11&quot;,</span><br><span class="line">      molecule: &quot;amount1&quot;,</span><br><span class="line">      denominator: &quot;amount3&quot;,</span><br><span class="line">      label: &quot;数值11&quot;,</span><br><span class="line">      width: 100,</span><br><span class="line">      sortable: true,</span><br><span class="line">      isPercent: true,</span><br><span class="line">      hidden: true,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      key: &quot;amount12&quot;,</span><br><span class="line">      molecule: &quot;amount1&quot;,</span><br><span class="line">      denominator: &quot;amount4&quot;,</span><br><span class="line">      label: &quot;数值12&quot;,</span><br><span class="line">      width: 100,</span><br><span class="line">      sortable: true,</span><br><span class="line">      isPercent: true,</span><br><span class="line">      hidden: true,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      key: &quot;amount13&quot;,</span><br><span class="line">      molecule: &quot;amount1&quot;,</span><br><span class="line">      denominator: &quot;amount5&quot;,</span><br><span class="line">      label: &quot;数值13&quot;,</span><br><span class="line">      width: 100,</span><br><span class="line">      sortable: true,</span><br><span class="line">      isPercent: true,</span><br><span class="line">      hidden: true,</span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="tableColumn-vue"><a href="#tableColumn-vue" class="headerlink" title="tableColumn.vue"></a>tableColumn.vue</h3><p>用于对 el-table-colum 的二次封装，配合上面表结构使用（直接看代码，其中 toFixedTwo，toPercent 函数在 mixin 混入）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div v-for&#x3D;&quot;(item, index) in TABLE_DATA_MAP[tableName]&quot; :key&#x3D;&quot;index + item&quot;&gt;</span><br><span class="line">      &lt;el-table-column</span><br><span class="line">        :label&#x3D;&quot;item.label&quot;</span><br><span class="line">        :key&#x3D;&quot;index + item&quot;</span><br><span class="line">        :min-width&#x3D;&quot;item.width&quot;</span><br><span class="line">        :sortable&#x3D;&quot;item.sortable&quot;</span><br><span class="line">        :prop&#x3D;&quot;item.key&quot;</span><br><span class="line">        show-overflow-tooltip</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;template slot-scope&#x3D;&quot;scope&quot;&gt;</span><br><span class="line">          &lt;span v-if&#x3D;&quot;!item.hidden&quot;&gt;&#123;&#123; scope.row[item.key] &#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">          &lt;span v-if&#x3D;&quot;item.Dict&quot;&gt;&#123;&#123; item.Dict[scope.row[item.key]] &#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">          &lt;span</span><br><span class="line">            v-if&#x3D;&quot;item.isFixedTwo&quot;</span><br><span class="line">          &gt;&#123;&#123;toFixedTwo(scope.row[item.molecule], scope.row[item.denominator])&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">          &lt;span</span><br><span class="line">            v-if&#x3D;&quot;item.isPercent&quot;</span><br><span class="line">          &gt;&#123;&#123;toPercent(scope.row[item.molecule], scope.row[item.denominator])&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">        &lt;&#x2F;template&gt;</span><br><span class="line">      &lt;&#x2F;el-table-column&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; TABLE_DATA_MAP &#125; from &quot;@&#x2F;utils&#x2F;tableData&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;table-column&quot;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    tableName: String</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      TABLE_DATA_MAP</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="Table-vue"><a href="#Table-vue" class="headerlink" title="Table.vue"></a>Table.vue</h3><p>优化后的页面如下，与之前相比是不是简洁了不少</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-table</span><br><span class="line">      class&#x3D;&quot;table&quot;</span><br><span class="line">      :data&#x3D;&quot;tableData&quot;</span><br><span class="line">      border</span><br><span class="line">      show-summary</span><br><span class="line">      highlight-current-row</span><br><span class="line">      style&#x3D;&quot;width: 100%&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;el-table-column prop&#x3D;&quot;id&quot; label&#x3D;&quot;ID&quot; width&#x3D;&quot;120&quot; fixed&#x3D;&quot;left&quot;&gt;&lt;&#x2F;el-table-column&gt;</span><br><span class="line">      &lt;table-column tableName&#x3D;&quot;tableDemo&quot;&gt;&lt;&#x2F;table-column&gt;</span><br><span class="line">    &lt;&#x2F;el-table&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      tableData: [</span><br><span class="line">        ...</span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    &quot;table-column&quot;: () &#x3D;&gt; import(&quot;@&#x2F;components&#x2F;tableColumn&quot;)</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    getSummaries(param) &#123;</span><br><span class="line">     ...</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>除了一些必要参数（如 key label）外，你可以在 tableData.js 中自定义任何参数，配合 tableColumn.vue 使用。与此同时，你可以在 tableColumn.vue 上对一些单独字段进行特殊处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 对 xxx 字段进行自定义</span><br><span class="line">&lt;template slot-scope&#x3D;&quot;scope&quot;&gt;</span><br><span class="line">    &lt;div v-if&#x3D;&quot;item.key &#x3D;&#x3D;&#x3D; &#39;xxx&#39;&quot;&gt;</span><br><span class="line">        &lt;span&gt;&#123;&#123;(scope.row[&#39;xxx&#39;] + scope.row[&#39;xxx1&#39;]+ scope.row[&#39;xxx2&#39;]).toFixed(2)&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">     &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><h2 id="合计列"><a href="#合计列" class="headerlink" title="合计列"></a>合计列</h2><p>此时如果需求要求合计值，也能够通过 <code>TABLE_DATA_MAP</code> 内数据快速实现（表驱动法经典场景，你可以想象不用现在的方法需要几个 if-else）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-table</span><br><span class="line">      class&#x3D;&quot;table&quot;</span><br><span class="line">      :data&#x3D;&quot;tableData&quot;</span><br><span class="line">      border</span><br><span class="line">      show-summary</span><br><span class="line">      :summary-method&#x3D;&quot;getSummaries&quot;</span><br><span class="line">      highlight-current-row</span><br><span class="line">      style&#x3D;&quot;width: 100%&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;el-table-column prop&#x3D;&quot;id&quot; label&#x3D;&quot;ID&quot; width&#x3D;&quot;120&quot; fixed&#x3D;&quot;left&quot;&gt;&lt;&#x2F;el-table-column&gt;</span><br><span class="line">      &lt;table-column tableName&#x3D;&quot;tableDemo&quot;&gt;&lt;&#x2F;table-column&gt;</span><br><span class="line">    &lt;&#x2F;el-table&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; TABLE_DATA_MAP &#125; from &quot;@&#x2F;utils&#x2F;tableData&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      TABLE_DATA_MAP,</span><br><span class="line">      tableData: [</span><br><span class="line">        ...</span><br><span class="line">      ],</span><br><span class="line">      &#x2F;&#x2F; totalData 模拟 amount 初始合计值（很可能合计值非简单的叠加，一般由后端传递）</span><br><span class="line">      totalData: &#123;</span><br><span class="line">        amount1: 1883,</span><br><span class="line">        amount2: 15.83,</span><br><span class="line">        amount3: 63,</span><br><span class="line">        amount4: 22.15,</span><br><span class="line">        amount5: 60</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">  methods: &#123;</span><br><span class="line">    getSummaries(&#123; columns &#125;) &#123;</span><br><span class="line">      let sums &#x3D; [];</span><br><span class="line">      columns.forEach((column, index) &#x3D;&gt; &#123;</span><br><span class="line">        if (column.property &#x3D;&#x3D;&#x3D; &quot;id&quot;) &#123;</span><br><span class="line">          sums[index] &#x3D; &quot;合计&quot;;</span><br><span class="line">          return;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          this.TABLE_DATA_MAP.tableDemo.forEach(keyObject &#x3D;&gt; &#123;</span><br><span class="line">            if (keyObject.key.includes(column.property)) &#123;</span><br><span class="line">              if (keyObject.isPercent &amp;&amp; keyObject.isPercent &#x3D;&#x3D;&#x3D; true) &#123;</span><br><span class="line">                sums[index] &#x3D; this.toPercent(</span><br><span class="line">                  this.totalData[keyObject.molecule],</span><br><span class="line">                  this.totalData[keyObject.denominator]</span><br><span class="line">                );</span><br><span class="line">              &#125; else if (</span><br><span class="line">                keyObject.isFixedTwo &amp;&amp;</span><br><span class="line">                keyObject.isFixedTwo &#x3D;&#x3D;&#x3D; true</span><br><span class="line">              ) &#123;</span><br><span class="line">                sums[index] &#x3D; this.toFixedTwo(</span><br><span class="line">                  this.totalData[keyObject.molecule],</span><br><span class="line">                  this.totalData[keyObject.denominator]</span><br><span class="line">                );</span><br><span class="line">              &#125; else &#123;</span><br><span class="line">                sums[index] &#x3D; this.totalData[column.property];</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      return sums;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/7094266-c3386d88c026e3bc?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h2 id="动态列表配置"><a href="#动态列表配置" class="headerlink" title="动态列表配置"></a>动态列表配置</h2><p>对于一些列表字段较多的 table 页面，实现列表字段的动态配置的需求就自然而然产生了。<br>也是得益于我们的表驱动法，我们能够很简单得做到这一点。</p><p>更新的目录结构:</p><p><img src="https://upload-images.jianshu.io/upload_images/7094266-a05f793f66c49d15?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="Table-vue-1"><a href="#Table-vue-1" class="headerlink" title="Table.vue"></a>Table.vue</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-button style&#x3D;&quot;margin-bottom:10px;&quot; type&#x3D;&quot;primary&quot; @click&#x3D;&quot;dialogs.configuration.show&#x3D;true&quot;&gt;列表配置&lt;&#x2F;el-button&gt;</span><br><span class="line">    &lt;el-table</span><br><span class="line">      ...</span><br><span class="line">    &lt;&#x2F;el-table&gt;</span><br><span class="line">    &lt;el-dialog</span><br><span class="line">      :title&#x3D;&quot;dialogs.configuration.title&quot;</span><br><span class="line">      :visible.sync&#x3D;&quot;dialogs.configuration.show&quot;</span><br><span class="line">      :close-on-click-modal&#x3D;&quot;false&quot;</span><br><span class="line">      width&#x3D;&quot;700px&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;transfer</span><br><span class="line">        :model&#x3D;&quot;dialogs.configuration.data&quot;</span><br><span class="line">        :tableName&#x3D;&quot;&#39;tableDemo&#39;&quot;</span><br><span class="line">        @close&#x3D;&quot;dialogs.configuration.show&#x3D;false&quot;</span><br><span class="line">        @editSuc&#x3D;&quot;editSuc(&#39;configuration&#39;)&quot;</span><br><span class="line">      &gt;&lt;&#x2F;transfer&gt;</span><br><span class="line">    &lt;&#x2F;el-dialog&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; TABLE_DATA_MAP &#125; from &quot;@&#x2F;utils&#x2F;tableData&quot;;</span><br><span class="line">const tableData &#x3D; [</span><br><span class="line">  ...</span><br><span class="line">];</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      TABLE_DATA_MAP,</span><br><span class="line">      tableData: [],</span><br><span class="line">      totalData: &#123;</span><br><span class="line">        ...</span><br><span class="line">      &#125;,</span><br><span class="line">      dialogs: &#123;</span><br><span class="line">        configuration: &#123;</span><br><span class="line">          title: &quot;动态列表配置&quot;,</span><br><span class="line">          data: &quot;&quot;,</span><br><span class="line">          show: false</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;...&#125;,</span><br><span class="line">  mounted()&#123;</span><br><span class="line">    this.getList()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    getList() &#123;</span><br><span class="line">      &#x2F;&#x2F; 模拟数据获取</span><br><span class="line">      setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">        this.tableData &#x3D; tableData;</span><br><span class="line">      &#125;, 1000);</span><br><span class="line">    &#125;,</span><br><span class="line">    getSummaries(&#123; columns &#125;) &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;,</span><br><span class="line">    editSuc(obj) &#123;</span><br><span class="line">      this.dialogs[obj].show &#x3D; false;</span><br><span class="line">      this.$message(&#123;</span><br><span class="line">        message: &quot;提交成功&quot;,</span><br><span class="line">        type: &quot;success&quot;</span><br><span class="line">      &#125;);</span><br><span class="line">      this.tableData &#x3D; []</span><br><span class="line">      this.getList()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="transfer-vue"><a href="#transfer-vue" class="headerlink" title="transfer.vue"></a>transfer.vue</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-transfer</span><br><span class="line">      filterable</span><br><span class="line">      :filter-method&#x3D;&quot;filterMethod&quot;</span><br><span class="line">      filter-placeholder&#x3D;&quot;请输入表头名&quot;</span><br><span class="line">      v-model&#x3D;&quot;value&quot;</span><br><span class="line">      :data&#x3D;&quot;data&quot;</span><br><span class="line">    &gt;&lt;&#x2F;el-transfer&gt;</span><br><span class="line">    &lt;el-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;doSubmit()&quot;&gt;提交&lt;&#x2F;el-button&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; TABLE_DATA_MAP &#125; from &quot;@&#x2F;utils&#x2F;tableData&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    tableName: String</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      TABLE_DATA_MAP,</span><br><span class="line">      data: TABLE_DATA_MAP[this.tableName], &#x2F;&#x2F; 当前页默认值</span><br><span class="line">      value: [], &#x2F;&#x2F; 现在在 transfer 右测的值</span><br><span class="line">      filterMethod(query, item) &#123;</span><br><span class="line">        return item.label.indexOf(query) &gt; -1;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    currentTableData() &#123;</span><br><span class="line">      return this.$store.state.currentTableData;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    doSubmit() &#123;</span><br><span class="line">      let sData &#x3D; [];</span><br><span class="line">      this.value.map(items &#x3D;&gt; &#123;</span><br><span class="line">        this.TABLE_DATA_MAP[this.tableName].forEach(item &#x3D;&gt; &#123;</span><br><span class="line">          if (item.key &#x3D;&#x3D;&#x3D; items) &#123;</span><br><span class="line">            sData.push(item);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">      &#x2F;&#x2F; 这里如果是实际项目应该会给后端接口传值来保存当前用户该页面的设置</span><br><span class="line">      this.$store.commit(&quot;SET_TABLE_DATA&quot;, &#123;</span><br><span class="line">        type: this.tableName,</span><br><span class="line">        data: sData</span><br><span class="line">      &#125;);</span><br><span class="line">      this.$emit(&quot;editSuc&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    this.value &#x3D; [];</span><br><span class="line">    &#x2F;&#x2F; 这里如果是实际项目 currentTableData 应该是后端获取数据，而不是 vuex 获取</span><br><span class="line">    if (this.currentTableData &amp;&amp; this.currentTableData[this.tableName]) &#123;</span><br><span class="line">      this.currentTableData[this.tableName].forEach(item &#x3D;&gt; &#123;</span><br><span class="line">        if (this.TABLE_DATA_MAP[this.tableName].includes(item.key)) &#123;</span><br><span class="line">          this.value.push(item.key);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="tableColumn-vue-1"><a href="#tableColumn-vue-1" class="headerlink" title="tableColumn.vue"></a>tableColumn.vue</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div</span><br><span class="line">      v-for&#x3D;&quot;(item, index) in ((currentTableData &amp;&amp; currentTableData[tableName])? currentTableData[tableName]: TABLE_DATA_MAP[tableName])&quot;</span><br><span class="line">      :key&#x3D;&quot;index + item&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;el-table-column&gt;</span><br><span class="line">        ...</span><br><span class="line">      &lt;&#x2F;el-table-column&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; TABLE_DATA_MAP &#125; from &quot;@&#x2F;utils&#x2F;tableData&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;table-column&quot;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    tableName: String</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      TABLE_DATA_MAP</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    &#x2F;&#x2F; currentTableData 实际工作中应该是保存在后端的值</span><br><span class="line">    currentTableData() &#123;</span><br><span class="line">      return this.$store.state.currentTableData;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="store-index-js"><a href="#store-index-js" class="headerlink" title="store/index.js"></a>store/index.js</h3><p>这里使用 vuex 存储 currentTableData（现在所配置的列表字段），如果是实际工作中，该数据应该存储于后端数据（后端保存当前用户对该页面的设置，而后在 tableColumn.vue 页获取）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import Vuex from &#39;vuex&#39;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    currentTableData: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    SET_TABLE_DATA(state, &#123; type, data &#125;) &#123;</span><br><span class="line">      state.currentTableData[type] &#x3D; data</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  modules: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/7094266-9f63140d164667ab?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><img src="https://upload-images.jianshu.io/upload_images/7094266-d4872f06ee2b2150?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>思路十分简单，本质就是在后端保存一份当前页面用户表格的私人定制 <code>TABLE_DATA_MAP</code> 文件。</p><h1 id="2-前端导出-table"><a href="#2-前端导出-table" class="headerlink" title="2. 前端导出 table"></a>2. 前端导出 table</h1><p>导出 table 表格是很常见的需求，基本上一些统计页面必备。</p><p>导出有多种方式：</p><h2 id="1-后端实现数据"><a href="#1-后端实现数据" class="headerlink" title="1. 后端实现数据"></a>1. 后端实现数据</h2><p>主要是后端将生成的 table 数据流给到前端，然后前端生成下载链接，模拟点击效果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">downloadFile(data) &#123;</span><br><span class="line">  if (!data) &#123;</span><br><span class="line">    return</span><br><span class="line">  &#125;</span><br><span class="line">  let url &#x3D; window.URL.createObjectURL(new Blob([data]));</span><br><span class="line">  let link &#x3D; document.createElement(&#39;a&#39;);</span><br><span class="line">  link.style.display &#x3D; &#39;none&#39;;</span><br><span class="line">  link.href &#x3D; url;</span><br><span class="line">  link.setAttribute(&#39;download&#39;, &#39;导出数据.csv&#39;);</span><br><span class="line">  document.body.appendChild(link);</span><br><span class="line">  link.click()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此种方法适用于有分页且分页量十分大，还有页面数据的展示和导出与后端传递数据（与上面我们需要对数据进行百分比等变化的数据不同）的情况。</p><h2 id="2-前端导出"><a href="#2-前端导出" class="headerlink" title="2. 前端导出"></a>2. 前端导出</h2><p>需要引入 xlsx 和 file-saver</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add slsx file-saver -S</span><br></pre></td></tr></table></figure><p>前端实现导出常见的又有两种方法：</p><h3 id="2-1-通过页面-Dom-元素获取数据导出"><a href="#2-1-通过页面-Dom-元素获取数据导出" class="headerlink" title="2.1. 通过页面 Dom 元素获取数据导出"></a>2.1. 通过页面 Dom 元素获取数据导出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* eslint-disable *&#x2F;</span><br><span class="line">import FileSaver from &#39;file-saver&#39;</span><br><span class="line">import XLSX from &#39;xlsx&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line">* 导出表格为 excel 格式</span><br><span class="line">* param &#123; Dom &#125; id            &#x2F;&#x2F; document.getElementById(&#39;table&#39;)</span><br><span class="line">* param &#123; string &#125; fileName    &#x2F;&#x2F; test.xlsx</span><br><span class="line">  * param &#123; Boolean &#125; rawBool 纯文本解析将不会解析值</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">export function exportExcelByDom(id, fileName, rawBool &#x3D; true) &#123;</span><br><span class="line">  &#x2F;**</span><br><span class="line">  * element-ui fixed 是生成两个 table，一个仅用于固定</span><br><span class="line">  * 判断要导出的节点中是否有 fixed 的表格</span><br><span class="line">  * 如果有，转换 excel 时先将该 dom 移除，然后 append 回去</span><br><span class="line">  *&#x2F;</span><br><span class="line">  const fix &#x3D; document.querySelector(&#39;.el-table__fixed&#39;) || document.querySelector(&#39;.el-table__fixed-right&#39;);</span><br><span class="line">  let wb;</span><br><span class="line">  &#x2F;**</span><br><span class="line">  * 从表生成工作簿对象</span><br><span class="line">  *&#x2F;</span><br><span class="line">  if (fix) &#123;</span><br><span class="line">    wb &#x3D; XLSX.utils.table_to_book(document.getElementById(id).removeChild(fix), &#123; raw: rawBool &#125;);</span><br><span class="line">    document.getElementById(id).appendChild(fix);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    wb &#x3D; XLSX.utils.table_to_book(document.getElementById(id), &#123; raw: rawBool &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;* 获取二进制字符串作为输出 *&#x2F;</span><br><span class="line">  const wbout &#x3D; XLSX.write(wb, &#123; bookType: &#39;xlsx&#39;, bookSST: true, type: &#39;array&#39; &#125;)</span><br><span class="line">  try &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">    * Blob 对象表示一个不可变、原始数据的类文件对象。</span><br><span class="line">    * Blob 表示的不一定是JavaScript原生格式的数据。</span><br><span class="line">    * File 接口基于Blob，继承了 blob 的功能并将其扩展使其支持用户系统上的文件。</span><br><span class="line">    * 返回一个新创建的 Blob 对象，其内容由参数中给定的数组串联组成。</span><br><span class="line">    * 设置导出文件名称</span><br><span class="line">    *&#x2F;</span><br><span class="line">    FileSaver.saveAs(new Blob([wbout], &#123; type: &#39;application&#x2F;octet-stream&#39; &#125;), fileName)</span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">    if (typeof console !&#x3D;&#x3D; &#39;undefined&#39;) console.log(e, wbout)</span><br><span class="line">  &#125;</span><br><span class="line">  return wbout</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此种方法适用于无分页、导出数据即为页面看到的样子的情况。</p><h3 id="2-2-通过-Export2Excel-js"><a href="#2-2-通过-Export2Excel-js" class="headerlink" title="2.2 通过 Export2Excel.js"></a>2.2 通过 Export2Excel.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* eslint-disable *&#x2F;</span><br><span class="line">import FileSaver from &#39;file-saver&#39;</span><br><span class="line">import XLSX from &#39;xlsx&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line">* Export2Excel.js</span><br><span class="line">* param &#123; Array &#125; th            &#x2F;&#x2F; [&#39;姓名&#39;]</span><br><span class="line">* param &#123; Array &#125; keyArray      &#x2F;&#x2F; [&#39;name&#39;]</span><br><span class="line">  * param &#123; Array &#125; jsonData    &#x2F;&#x2F; 处理好的所有数据</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">export function export_json_to_excel(th, keyArray, jsonData, defaultTitle) &#123;</span><br><span class="line"></span><br><span class="line">  &#x2F;* original data *&#x2F;</span><br><span class="line">  let data &#x3D; jsonData.map(v &#x3D;&gt; keyArray.map(j &#x3D;&gt; v[j]));</span><br><span class="line">  data.unshift(th);</span><br><span class="line">  let ws_name &#x3D; &quot;SheetJS&quot;;</span><br><span class="line"></span><br><span class="line">  let wb &#x3D; new Workbook(), ws &#x3D; sheet_from_array_of_arrays(data);</span><br><span class="line"></span><br><span class="line">  &#x2F;* add worksheet to workbook *&#x2F;</span><br><span class="line">  wb.SheetNames.push(ws_name);</span><br><span class="line">  wb.Sheets[ws_name] &#x3D; ws;</span><br><span class="line"></span><br><span class="line">  let wbout &#x3D; XLSX.write(wb, &#123; bookType: &#39;xlsx&#39;, bookSST: false, type: &#39;binary&#39; &#125;);</span><br><span class="line">  let title &#x3D; defaultTitle || &#39;导出数据&#39;</span><br><span class="line">  FileSaver(new Blob([s2ab(wbout)], &#123; type: &quot;application&#x2F;octet-stream&quot; &#125;), title + &quot;.xlsx&quot;)</span><br><span class="line">&#125;;</span><br><span class="line">...</span><br><span class="line">&#x2F;&#x2F; 其他部分省略</span><br></pre></td></tr></table></figure><p>Export2Excel.js 网上有很多版本，大同小异。我对其 <code>export_json_to_excel</code> 函数作了封装，Export2Excel.js 里面也有通过 DOM 导出的方法，但使用时会崩溃，因此通过 DOM 导出推荐 2.1 方法</p><p>又得益于我们之前的 <code>TABLE_DATA_MAP</code> 文件，2.2 方法导出基本没有工作量的问题，节省了很大时间（相信看到这里，你能够体会到表驱动法对 table 的意义）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">doExport2Excel() &#123;</span><br><span class="line">  const tHeader &#x3D; [&quot;ID&quot;];</span><br><span class="line">  const keyArray &#x3D; [&quot;id&quot;];</span><br><span class="line">  this.TABLE_DATA_MAP.tableDemo.forEach(item &#x3D;&gt; &#123;</span><br><span class="line">    tHeader.push(item.label);</span><br><span class="line">    keyArray.push(item.key);</span><br><span class="line">  &#125;);</span><br><span class="line">  &#x2F;&#x2F; 这里 jsonData 应该是所要导出的所有数据，可让后端传值</span><br><span class="line">  const jsonData &#x3D; this.tableData;</span><br><span class="line">  jsonData.forEach(list &#x3D;&gt; &#123;</span><br><span class="line">    this.TABLE_DATA_MAP.tableDemo.forEach(keyObject &#x3D;&gt; &#123;</span><br><span class="line">      if (keyObject.isPercent &amp;&amp; keyObject.isPercent &#x3D;&#x3D;&#x3D; true) &#123;</span><br><span class="line">        list[keyObject.key] &#x3D; this.toPercent(</span><br><span class="line">          list[keyObject.molecule],</span><br><span class="line">          list[keyObject.denominator]</span><br><span class="line">        );</span><br><span class="line">      &#125; else if (keyObject.isFixedTwo &amp;&amp; keyObject.isFixedTwo &#x3D;&#x3D;&#x3D; true) &#123;</span><br><span class="line">        list[keyObject.key] &#x3D; this.toFixedTwo(</span><br><span class="line">          list[keyObject.molecule],</span><br><span class="line">          list[keyObject.denominator]</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  export_json_to_excel(tHeader, keyArray, jsonData, &quot;数据导出&quot;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>这种方法比 2.1 好在：很多时候导出的 table 列与展示的是不一致的（如通过列表配置，展示字段少于导出字段情况），我们甚至可以在导出时对某些字段作不同于页面展示的数据处理。</p><p>与此同时其解决了后端导出数据会与展示数据不一致的问题，在主动性和灵活性上更胜一筹。</p><hr><p>花了快一天时间写 demo + 整理，暂时先写这么多</p><p>不定时更新。。。</p><p>以上完整代码看 <a href="https://github.com/Adashuai5/vue-element-plus">这里</a></p><p>整理不易，别忘了点个赞😄！</p>]]></content:encoded>
      
      <comments>https://github.com/Adashuai5/Adashuai5.github.io/2020/05/01/%E3%80%90%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%E3%80%91vue-element-ui-%E8%B8%A9%E5%9D%91%E2%80%94%E2%80%94-table-%E7%AF%87/#disqus_thread</comments>
    </item>
    
    <item>
      <title>如果让你展示国内各省市疫情数据你会怎么做</title>
      <link>https://github.com/Adashuai5/Adashuai5.github.io/2020/04/09/%E5%A6%82%E6%9E%9C%E8%AE%A9%E4%BD%A0%E5%B1%95%E7%A4%BA%E5%9B%BD%E5%86%85%E5%90%84%E7%9C%81%E5%B8%82%E7%96%AB%E6%83%85%E6%95%B0%E6%8D%AE%E4%BD%A0%E4%BC%9A%E6%80%8E%E4%B9%88%E5%81%9A/</link>
      <guid>https://github.com/Adashuai5/Adashuai5.github.io/2020/04/09/%E5%A6%82%E6%9E%9C%E8%AE%A9%E4%BD%A0%E5%B1%95%E7%A4%BA%E5%9B%BD%E5%86%85%E5%90%84%E7%9C%81%E5%B8%82%E7%96%AB%E6%83%85%E6%95%B0%E6%8D%AE%E4%BD%A0%E4%BC%9A%E6%80%8E%E4%B9%88%E5%81%9A/</guid>
      <pubDate>Wed, 08 Apr 2020 17:10:41 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;2020 年初始至今，冠状病毒肆虐，好在国内疫情已经逐步减少，武汉也解封了，而国外疫情却日益严重，不容乐观。&lt;/p&gt;
&lt;h1 id=&quot;做个可视化地图模拟展示一下疫情&quot;&gt;&lt;a href=&quot;#做个可视化地图模拟展示一下疫情&quot; class=&quot;headerlink&quot; title=&quot;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>2020 年初始至今，冠状病毒肆虐，好在国内疫情已经逐步减少，武汉也解封了，而国外疫情却日益严重，不容乐观。</p><h1 id="做个可视化地图模拟展示一下疫情"><a href="#做个可视化地图模拟展示一下疫情" class="headerlink" title="做个可视化地图模拟展示一下疫情"></a>做个可视化地图模拟展示一下疫情</h1><p>我们可以看到，各大 APP 都有实时显示全国乃至世界的疫情数据的地图表，那么它们是如何实现的呢？</p><p>让我们以中国为例，实现一下展示效果。由于平时用 Vue 较多，可视化框架之前在项目中用过 echarts，就用这两个来演示。（注：本次数据都是随机生成，非官方真实数据）</p><p>用 vue-cli 快速搭建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create vue-echarts-map-china</span><br></pre></td></tr></table></figure><p>引入 echarts</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add echarts -D</span><br></pre></td></tr></table></figure><h1 id="如何展示中国各省数据"><a href="#如何展示中国各省数据" class="headerlink" title="如何展示中国各省数据"></a>如何展示中国各省数据</h1><p>ProvinceChart.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;chart&quot; ref&#x3D;&quot;chart&quot; style&#x3D;&quot;width: 100%; height: 800px&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><p>我们首先需要给 echarts 一个容器</p><h2 id="引用-js-json-地图数据"><a href="#引用-js-json-地图数据" class="headerlink" title="引用 js/json 地图数据"></a>引用 js/json 地图数据</h2><p>echats 内置了 china.js 和 china.json 及其省市地图包，china.js 引入即可使用 china.json 需要注册到 echarts，两种方式任选</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import echarts from &quot;echarts&quot;;</span><br><span class="line">import &quot;echarts&#x2F;theme&#x2F;macarons&quot;; &#x2F;&#x2F; echarts 主题</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 1. china.js 直接使用</span><br><span class="line">import china from &quot;echarts&#x2F;map&#x2F;js&#x2F;china&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 2. china.json 需注册</span><br><span class="line">import china from &quot;echarts&#x2F;map&#x2F;json&#x2F;china&quot;;</span><br><span class="line">echarts.registerMap(&quot;china&quot;, china);</span><br></pre></td></tr></table></figure><h2 id="主要结构"><a href="#主要结构" class="headerlink" title="主要结构"></a>主要结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  name: &quot;chart&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      chart: null</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    if (!this.chart) &#123;</span><br><span class="line">      this.drawChinaMap();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeDestroy() &#123;</span><br><span class="line">    if (!this.chart) &#123;</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line">    this.chart.dispose();</span><br><span class="line">    this.chart &#x3D; null;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    drawChinaMap()&#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="drawChinaMap-方法详解"><a href="#drawChinaMap-方法详解" class="headerlink" title="drawChinaMap 方法详解"></a>drawChinaMap 方法详解</h2><p>首先找到我们的容器用 echarts.init() 初始化 echarts</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">this.chart &#x3D; echarts.init(document.querySelector(&quot;.chart&quot;), &quot;macarons&quot;);</span><br><span class="line">this.chart.setOption(&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>通过 setOption 传入我们需要设定的选项参数</p><h3 id="图表类型及参数"><a href="#图表类型及参数" class="headerlink" title="图表类型及参数"></a>图表类型及参数</h3><p>最主要的是设置图表类型了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">series: [</span><br><span class="line">  &#123;</span><br><span class="line">    name: &quot;数据&quot;,</span><br><span class="line">    type: &quot;map&quot;,</span><br><span class="line">    mapType: &quot;china&quot;, &#x2F;&#x2F; 对应我们注册好的 &quot;china&quot;</span><br><span class="line">    roam: true, &#x2F;&#x2F; 是否可缩放</span><br><span class="line">    label: &#123; &#x2F;&#x2F; 文本标签</span><br><span class="line">      normal: &#123;</span><br><span class="line">        show: true &#x2F;&#x2F;省份名称</span><br><span class="line">      &#125;,</span><br><span class="line">      emphasis: &#123;</span><br><span class="line">        show: false</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 地图默认样式</span><br><span class="line">    itemStyle: &#123;</span><br><span class="line">      normal: &#123;</span><br><span class="line">        show: true,</span><br><span class="line">        areaColor: &quot;#CECECE&quot;,</span><br><span class="line">        borderColor: &quot;#FCFCFC&quot;,</span><br><span class="line">        borderWidth: &quot;1&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      emphasis: &#123;</span><br><span class="line">        show: true,</span><br><span class="line">        areaColor: &quot;#C8A5DF&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data: [</span><br><span class="line">      ...</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>最重要的是 34 个省份的数据，这里我们模拟一下（注意格式和 name 是固定的）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">data: [</span><br><span class="line">  &#123; name: &quot;北京&quot;, value: Math.round(Math.random() * 1000) &#125;,</span><br><span class="line">  &#123; name: &quot;天津&quot;, value: Math.round(Math.random() * 1000) &#125;,</span><br><span class="line">  &#123; name: &quot;上海&quot;, value: Math.round(Math.random() * 1000) &#125;,</span><br><span class="line">  &#123; name: &quot;重庆&quot;, value: Math.round(Math.random() * 1000) &#125;,</span><br><span class="line">  &#123; name: &quot;河北&quot;, value: Math.round(Math.random() * 1000) &#125;,</span><br><span class="line">  &#123; name: &quot;河南&quot;, value: Math.round(Math.random() * 1000) &#125;,</span><br><span class="line">  &#123; name: &quot;云南&quot;, value: Math.round(Math.random() * 1000) &#125;,</span><br><span class="line">  &#123; name: &quot;辽宁&quot;, value: Math.round(Math.random() * 1000) &#125;,</span><br><span class="line">  &#123; name: &quot;黑龙江&quot;, value: Math.round(Math.random() * 1000) &#125;,</span><br><span class="line">  &#123; name: &quot;湖南&quot;, value: Math.round(Math.random() * 1000) &#125;,</span><br><span class="line">  &#123; name: &quot;安徽&quot;, value: Math.round(Math.random() * 1000) &#125;,</span><br><span class="line">  &#123; name: &quot;山东&quot;, value: Math.round(Math.random() * 1000) &#125;,</span><br><span class="line">  &#123; name: &quot;新疆&quot;, value: Math.round(Math.random() * 1000) &#125;,</span><br><span class="line">  &#123; name: &quot;江苏&quot;, value: Math.round(Math.random() * 1000) &#125;,</span><br><span class="line">  &#123; name: &quot;浙江&quot;, value: Math.round(Math.random() * 1000) &#125;,</span><br><span class="line">  &#123; name: &quot;江西&quot;, value: Math.round(Math.random() * 1000) &#125;,</span><br><span class="line">  &#123; name: &quot;湖北&quot;, value: 9999 &#125;,</span><br><span class="line">  &#123; name: &quot;广西&quot;, value: Math.round(Math.random() * 1000) &#125;,</span><br><span class="line">  &#123; name: &quot;甘肃&quot;, value: Math.round(Math.random() * 1000) &#125;,</span><br><span class="line">  &#123; name: &quot;山西&quot;, value: Math.round(Math.random() * 1000) &#125;,</span><br><span class="line">  &#123; name: &quot;内蒙古&quot;, value: Math.round(Math.random() * 1000) &#125;,</span><br><span class="line">  &#123; name: &quot;陕西&quot;, value: Math.round(Math.random() * 1000) &#125;,</span><br><span class="line">  &#123; name: &quot;吉林&quot;, value: Math.round(Math.random() * 1000) &#125;,</span><br><span class="line">  &#123; name: &quot;福建&quot;, value: Math.round(Math.random() * 1000) &#125;,</span><br><span class="line">  &#123; name: &quot;贵州&quot;, value: Math.round(Math.random() * 1000) &#125;,</span><br><span class="line">  &#123; name: &quot;广东&quot;, value: Math.round(Math.random() * 1000) &#125;,</span><br><span class="line">  &#123; name: &quot;青海&quot;, value: Math.round(Math.random() * 1000) &#125;,</span><br><span class="line">  &#123; name: &quot;西藏&quot;, value: Math.round(Math.random() * 1000) &#125;,</span><br><span class="line">  &#123; name: &quot;四川&quot;, value: Math.round(Math.random() * 1000) &#125;,</span><br><span class="line">  &#123; name: &quot;宁夏&quot;, value: Math.round(Math.random() * 1000) &#125;,</span><br><span class="line">  &#123; name: &quot;海南&quot;, value: Math.round(Math.random() * 1000) &#125;,</span><br><span class="line">  &#123; name: &quot;台湾&quot;, value: Math.round(Math.random() * 1000) &#125;,</span><br><span class="line">  &#123; name: &quot;香港&quot;, value: Math.round(Math.random() * 1000) &#125;,</span><br><span class="line">  &#123; name: &quot;澳门&quot;, value: Math.round(Math.random() * 1000) &#125;</span><br><span class="line">] &#x2F;&#x2F;数据</span><br></pre></td></tr></table></figure><p>其他选项设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">backgroundColor: &quot;#FFFFFF&quot;,</span><br><span class="line">title: &#123;</span><br><span class="line">  text: &quot;全国省市地图大数据&quot;,</span><br><span class="line">  subtext: &quot;虚构数据&quot;,</span><br><span class="line">  x: &quot;center&quot;</span><br><span class="line">&#125;,</span><br><span class="line">tooltip: &#123;</span><br><span class="line">  trigger: &quot;item&quot;</span><br><span class="line">&#125;,</span><br><span class="line">toolbox: &#123; &#x2F;&#x2F; 右侧复位下载</span><br><span class="line">  show: true,</span><br><span class="line">  orient: &quot;vertical&quot;,</span><br><span class="line">  right: &quot;20&quot;,</span><br><span class="line">  top: &quot;center&quot;,</span><br><span class="line">  feature: &#123;</span><br><span class="line">    mark: &#123; show: true &#125;,</span><br><span class="line">    restore: &#123; show: true &#125;,</span><br><span class="line">    saveAsImage: &#123; show: true &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 左侧小导航图标</span><br><span class="line">visualMap: &#123;</span><br><span class="line">  show: true,</span><br><span class="line">  x: &quot;left&quot;,</span><br><span class="line">  y: &quot;center&quot;,</span><br><span class="line">  splitList: [</span><br><span class="line">    &#123; start: 10000 &#125;,</span><br><span class="line">    &#123; start: 1000, end: 9999 &#125;,</span><br><span class="line">    &#123; start: 500, end: 999 &#125;,</span><br><span class="line">    &#123; start: 100, end: 499 &#125;,</span><br><span class="line">    &#123; start: 10, end: 99 &#125;,</span><br><span class="line">    &#123; start: 0, end: 9 &#125;</span><br><span class="line">  ],</span><br><span class="line">  color: [</span><br><span class="line">    &quot;#a50026&quot;,</span><br><span class="line">    &quot;#d73027&quot;,</span><br><span class="line">    &quot;#f46d43&quot;,</span><br><span class="line">    &quot;#fdae61&quot;,</span><br><span class="line">    &quot;#fee090&quot;,</span><br><span class="line">    &quot;#ffffbf&quot;,</span><br><span class="line">    &quot;#f0f0f0&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="效果如下"><a href="#效果如下" class="headerlink" title="效果如下:"></a>效果如下:</h2><p><img src="https://upload-images.jianshu.io/upload_images/7094266-0c7418f37ceb6971.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h1 id="如何展示中国各市数据"><a href="#如何展示中国各市数据" class="headerlink" title="如何展示中国各市数据"></a>如何展示中国各市数据</h1><p>如果要展示各市单独数据较为简单，只需要把地图和对应数据变成省即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import hubei from &quot;echarts&#x2F;map&#x2F;json&#x2F;province&#x2F;hubei&quot;;</span><br><span class="line">echarts.registerMap(&quot;hubei&quot;, hubei);</span><br><span class="line"></span><br><span class="line">series:[</span><br><span class="line">  ...</span><br><span class="line">  mapType: &quot;hubei&quot;,</span><br><span class="line">  ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>你还可以做到点击省切换成市的效果，网上也有相应教程，实现方法也简单，这里不作详细介绍。</p><p>但是我想要看整个中国地图下的市的疫情情况怎么办？</p><h2 id="合并省市地图"><a href="#合并省市地图" class="headerlink" title="合并省市地图"></a>合并省市地图</h2><p>由于官方只提供了中国地图和省市分开的地图 json 或 js 包，而没有合并在一起的，我们没有现成的数据。</p><p>然而我注意到，china 和各省的 json 包只是 features 不同，如下图所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/7094266-5c6107fee246ffc6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">china.features &#x3D; [...new Set([...china.features, ...hubei.features])];</span><br></pre></td></tr></table></figure><p>最终，这种方法被我放弃了，原因如下：</p><ol><li>视觉效果差：</li></ol><p>如下图，有字根本看不清，没字也会很密集</p><p><img src="https://upload-images.jianshu.io/upload_images/7094266-2373ab19d5bcda27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ol start="2"><li>渲染效果差：</li></ol><p>目前只实现了一个省，可预见的是加上所有省份数据量很大（features 长度最终会是 533 ），渲染会卡顿</p><ol start="3"><li>有引入延迟问题：</li></ol><p>由于需要将 34 个省 JSON 包分别引入后合并到 china 内部，通常 echarts 组件已经渲染完毕</p><h2 id="使用中国地图配合市散点图"><a href="#使用中国地图配合市散点图" class="headerlink" title="使用中国地图配合市散点图"></a>使用中国地图配合市散点图</h2><p>我找到官方提供的<a href="https://www.echartsjs.com/examples/en/editor.html?c=doc-example/scatter-visualMap-piecewise" target="_blank" rel="noopener">scatter-visualMap-piecewise</a>示例，感觉这种方式也能满足我的要求，且呈现效果更好</p><h3 id="选项变化"><a href="#选项变化" class="headerlink" title="选项变化"></a>选项变化</h3><p>与原选项主要区别是 series 使用 scatter 散点类型，同时引入 geo 地理坐标系组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">geo: &#123;</span><br><span class="line">  map: &quot;china&quot;,</span><br><span class="line">  roam: true,</span><br><span class="line">  itemStyle: &#123;</span><br><span class="line">    &#x2F;&#x2F; 定义样式</span><br><span class="line">    normal: &#123;</span><br><span class="line">      &#x2F;&#x2F; 普通状态下的样式</span><br><span class="line">      areaColor: &quot;#323c48&quot;,</span><br><span class="line">      borderColor: &quot;#111&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    emphasis: &#123;</span><br><span class="line">      &#x2F;&#x2F; 高亮状态下的样式</span><br><span class="line">      areaColor: &quot;#2a333d&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">series: [</span><br><span class="line">  &#123;</span><br><span class="line">    name: &quot;确诊人数&quot;,</span><br><span class="line">    symbolSize: 10, &#x2F;&#x2F; 点坐标大小</span><br><span class="line">    type: &quot;scatter&quot;,</span><br><span class="line">    data: this.cityData,</span><br><span class="line">    coordinateSystem: &quot;geo&quot;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>其数据格式如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; this.cityData</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  &#123; name: &quot;武汉&quot;, value: [114.31, 30.52, 8888 &#125;], &#x2F;&#x2F; &#123; name: name, value: [x, y, value&#125;],</span><br><span class="line">  &#123; name: &quot;大庆&quot;, value: [125.03, 46.58, Math.round(Math.random() * 100) &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="示例小问题"><a href="#示例小问题" class="headerlink" title="示例小问题"></a>示例小问题</h3><p>需要注意的是，官方示例中 tooltip 的悬浮数据是有问题的，它不是 pm2.5 的 value，而是极坐标的 Y 的值</p><p><img src="https://upload-images.jianshu.io/upload_images/7094266-d5ecbc146da32560.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>想要其展示正确的数据需要在 tooltip 设置 formatter：以回调函数格式设置数据为 data 的第三个数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tooltip: &#123;</span><br><span class="line">  trigger: &quot;item&quot;,</span><br><span class="line">  formatter: params &#x3D;&gt; &#123;</span><br><span class="line">    return (</span><br><span class="line">      params.seriesName + &quot;&lt;br&#x2F;&gt;&quot; + params.name + &quot;:&quot; + params.data.value[2]</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最终效果如下"><a href="#最终效果如下" class="headerlink" title="最终效果如下:"></a>最终效果如下:</h2><p><img src="https://upload-images.jianshu.io/upload_images/7094266-9928e061111e0303.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>至此，我们完成了国内各省市疫情模拟数据的可视化，如果想要展示世界数据也是类似，只需找到相应地图包替换，并处理对应数据即可。echarts 提供了完整的文档，按需查找对应选项即可完成相应需求，当然还有很多不错的库和方法等我们去探究。</p><p>如需查看完整代码：<a href="https://github.com/Adashuai5/vue-echarts-map-china">请点这里</a></p><p>看到这里了，不点个赞吗 😄！</p>]]></content:encoded>
      
      <comments>https://github.com/Adashuai5/Adashuai5.github.io/2020/04/09/%E5%A6%82%E6%9E%9C%E8%AE%A9%E4%BD%A0%E5%B1%95%E7%A4%BA%E5%9B%BD%E5%86%85%E5%90%84%E7%9C%81%E5%B8%82%E7%96%AB%E6%83%85%E6%95%B0%E6%8D%AE%E4%BD%A0%E4%BC%9A%E6%80%8E%E4%B9%88%E5%81%9A/#disqus_thread</comments>
    </item>
    
    <item>
      <title>【前端路由】这可能是最容易理解的一篇了</title>
      <link>https://github.com/Adashuai5/Adashuai5.github.io/2020/04/04/hash-%E6%A8%A1%E5%BC%8F%E5%92%8C-history-%E6%A8%A1%E5%BC%8F%E5%B0%8F%E8%AE%B0/</link>
      <guid>https://github.com/Adashuai5/Adashuai5.github.io/2020/04/04/hash-%E6%A8%A1%E5%BC%8F%E5%92%8C-history-%E6%A8%A1%E5%BC%8F%E5%B0%8F%E8%AE%B0/</guid>
      <pubDate>Sat, 04 Apr 2020 08:45:33 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;随着 ajax 的流行，异步数据请求体验极具提升，用户得以在不刷新浏览器的情况下进行页面交互，而异步交互体验的更高级版本就是 SPA —— 单页应用。&lt;/p&gt;
&lt;p&gt;单页应用不仅仅是在页面交互时无刷新，连页面跳转都是无刷新的，为了实现单页应用，就有了&lt;strong&gt;前端路由
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>随着 ajax 的流行，异步数据请求体验极具提升，用户得以在不刷新浏览器的情况下进行页面交互，而异步交互体验的更高级版本就是 SPA —— 单页应用。</p><p>单页应用不仅仅是在页面交互时无刷新，连页面跳转都是无刷新的，为了实现单页应用，就有了<strong>前端路由</strong>。</p><h1 id="常用的两种模式"><a href="#常用的两种模式" class="headerlink" title="常用的两种模式"></a>常用的两种模式</h1><p>类似于服务端路由解析对应的 url 路径，返回对应的页面/资源的方式，前端路由实现起来其实也很简单，就是匹配不同的 url 路径，进行解析，然后动态的渲染出区域 html 内容。</p><p>这样自然 url 每次变化的时候，都会造成页面的刷新。</p><p>那么在改变 url 的情况下，如何保证页面的不刷新？</p><h2 id="hash-模式"><a href="#hash-模式" class="headerlink" title="hash 模式"></a>hash 模式</h2><p>在 2014 年之前，大家是通过 hash 来实现路由，url hash 就是类似于：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.xxx.com/#/login</span><br></pre></td></tr></table></figure><p>这种 # 后面 hash 值的变化，并不会导致浏览器向服务器发出请求，浏览器不发出请求，也就不会刷新页面。</p><h3 id="为什么改变-hash-不刷新页面？——URL的井号‘-’"><a href="#为什么改变-hash-不刷新页面？——URL的井号‘-’" class="headerlink" title="为什么改变 hash 不刷新页面？——URL的井号‘#’"></a>为什么改变 hash 不刷新页面？——<a href="http://www.ruanyifeng.com/blog/2011/03/url_hash.html" target="_blank" rel="noopener">URL的井号‘#’</a></h3><blockquote><p>‘#’ 代表网页中的一个位置，它后面的字符，就是该位置的标识符，它只对浏览器有用，服务器不识别，因此 HTTP 请求不会包含 #</p></blockquote><p>(想要请求 url 包含 # ，可使用 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent" target="_blank" rel="noopener">encodeURIComponent()</a><br>进行部分转义)</p><p><strong>改变 hash ，只会让浏览器滚动到相应位置，不会重载网页</strong></p><p>每次 hash 值的变化，会触发 hashchange 事件，通过<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/onhashchange" target="_blank" rel="noopener"><code>window.onhashchange</code></a>监听该事件我们就可以检测变化的 hash 值来做相应的页面操作。</p><h3 id="简易实现"><a href="#简易实现" class="headerlink" title="简易实现"></a>简易实现</h3><p>接下来我们用最简单的代码实现 hash 模式，仅为了解其思想（你可以直接复制到一个 html 上并通过静态服务器如 <a href="https://www.npmjs.com/package/http-server" target="_blank" rel="noopener">http-server</a> 查看）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot; &#x2F;&gt;</span><br><span class="line">    &lt;title&gt;Hash 路由&lt;&#x2F;title&gt;</span><br><span class="line">  &lt;&#x2F;head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li&gt;&lt;a href&#x3D;&quot;#red&quot;&gt;红色背景&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">      &lt;li&gt;&lt;a href&#x3D;&quot;#green&quot;&gt;绿色背景&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">      &lt;li&gt;&lt;a href&#x3D;&quot;#grey&quot;&gt;灰色背景&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      function watchHash() &#123;</span><br><span class="line">        const hash &#x3D; window.location.hash.slice(1) || &#39;&#x2F;&#39;;</span><br><span class="line">        switch (hash) &#123;</span><br><span class="line">          case &quot;red&quot;:</span><br><span class="line">            document.body.style.background &#x3D; &quot;red&quot;;</span><br><span class="line">            break;</span><br><span class="line">          case &quot;green&quot;:</span><br><span class="line">            document.body.style.background &#x3D; &quot;green&quot;;</span><br><span class="line">            break;</span><br><span class="line">          case &quot;grey&quot;:</span><br><span class="line">            document.body.style.background &#x3D; &quot;grey&quot;;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      window.addEventListener(&quot;hashchange&quot;, watchHash, false);</span><br><span class="line">      window.addEventListener(&quot;load&quot;, watchHash, false);</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">  &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h4 id="如何实现最基础的前进后退？"><a href="#如何实现最基础的前进后退？" class="headerlink" title="如何实现最基础的前进后退？"></a>如何实现最基础的前进后退？</h4><p>这里我们简单实现一下后退功能，前进思路类似：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot; &#x2F;&gt;</span><br><span class="line">    &lt;title&gt;Hash 路由&lt;&#x2F;title&gt;</span><br><span class="line">  &lt;&#x2F;head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li&gt;&lt;a href&#x3D;&quot;#red&quot;&gt;红色背景&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">      &lt;li&gt;&lt;a href&#x3D;&quot;#green&quot;&gt;绿色背景&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">      &lt;li&gt;&lt;a href&#x3D;&quot;#grey&quot;&gt;灰色背景&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">    &lt;button id&#x3D;&quot;back&quot; disabled&#x3D;&quot;true&quot;&gt;后退&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      var isGoBack &#x3D; false;</span><br><span class="line">      const history &#x3D; [];</span><br><span class="line">      function watchHash() &#123;</span><br><span class="line">        const hash &#x3D; window.location.hash.slice(1) || &quot;&#x2F;&quot;;</span><br><span class="line">        &#x2F;&#x2F; 防止后退时也记录 hash</span><br><span class="line">        if (!isGoBack &amp;&amp; window.location.hash) &#123;</span><br><span class="line">          history.push(window.location.hash);</span><br><span class="line">        &#125;</span><br><span class="line">        back.disabled &#x3D; history.length &gt; 0 ? false : true;</span><br><span class="line">        console.log(history);</span><br><span class="line">        switch (hash) &#123;</span><br><span class="line">          case &quot;red&quot;:</span><br><span class="line">            document.body.style.background &#x3D; &quot;red&quot;;</span><br><span class="line">            break;</span><br><span class="line">          case &quot;green&quot;:</span><br><span class="line">            document.body.style.background &#x3D; &quot;green&quot;;</span><br><span class="line">            break;</span><br><span class="line">          case &quot;grey&quot;:</span><br><span class="line">            document.body.style.background &#x3D; &quot;grey&quot;;</span><br><span class="line">            break;</span><br><span class="line">          default:</span><br><span class="line">            document.body.style.background &#x3D; &quot;#fff&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        isGoBack &#x3D; false;</span><br><span class="line">      &#125;</span><br><span class="line">      back.onclick &#x3D; goBack;</span><br><span class="line">      function goBack() &#123;</span><br><span class="line">        isGoBack &#x3D; true;</span><br><span class="line">        if (history.length &gt; 0) &#123;</span><br><span class="line">          history.pop(1);</span><br><span class="line">          window.location.hash &#x3D; history[history.length - 1] || &quot;&quot;;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          back.disabled &#x3D; true;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      window.addEventListener(&quot;load&quot;, watchHash, false);</span><br><span class="line">      window.addEventListener(&quot;hashchange&quot;, watchHash, false);</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">  &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>思路就是通过一个数组记录每次 hashchange 事件的 hash 值，点击后退时取出上一次 hash 值覆盖当前页面的 hash。</p><p>需要注意的是需要区别当前 hash 是后退生成（后退时的 hash 变化不应记录）的还是跳转生成，避免重复记录。</p><p><img src="https://upload-images.jianshu.io/upload_images/7094266-a0a5b8004805e7da.gif?imageMogr2/auto-orient/strip" alt="image"></p><h2 id="history-模式"><a href="#history-模式" class="headerlink" title="history 模式"></a>history 模式</h2><p>可以看到，在早期 hash 模式虽然可以实现前端路由，但其后退前进操作就十分麻烦。</p><p>2014 年后，HTML5 引入了 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/History" target="_blank" rel="noopener">History</a> API，让我们能够快速访问页面历史。</p><p>其中 <a href="https://developer.mozilla.org/en-US/docs/Web/API/History/pushState" target="_blank" rel="noopener">history.pushState()</a> 和 <a href="https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState" target="_blank" rel="noopener">history.replaceState()</a> 方法，它们分别可以添加和修改历史记录条目，通过这两个 API 可以改变 url 地址而无须重新加载页面。</p><p>同时还有 popstate 事件：<br>通过<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/onpopstate" target="_blank" rel="noopener" title="window.onpopstate是popstate事件在window对象上的事件处理程序."><code>window.onpopstate</code></a>可以监听在<strong>浏览器点击后退、前进按钮(或者在 JavaScript 中调用 history.back()、history.forward()、history.go() 方法)</strong> 触发的 popstate 事件。</p><p>通过这些就能用另一种方式来实现前端路由了，但原理都是跟 hash 实现相同的。</p><h3 id="用-history-实现上面-hash-代码"><a href="#用-history-实现上面-hash-代码" class="headerlink" title="用 history 实现上面 hash 代码"></a>用 history 实现上面 hash 代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;</span><br><span class="line">    &lt;title&gt;History 路由&lt;&#x2F;title&gt;</span><br><span class="line">  &lt;&#x2F;head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;ul id&#x3D;&quot;ul&quot;&gt;</span><br><span class="line">      &lt;li&gt;&lt;a href&#x3D;&quot;&#x2F;red&quot;&gt;红色背景&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">      &lt;li&gt;&lt;a href&#x3D;&quot;&#x2F;green&quot;&gt;绿色背景&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">      &lt;li&gt;&lt;a href&#x3D;&quot;&#x2F;grey&quot;&gt;灰色背景&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      const path &#x3D; window.location.pathname;</span><br><span class="line">      history.replaceState(&#123; path: path &#125;, null, path);</span><br><span class="line">      ul.addEventListener(&quot;click&quot;, (e) &#x3D;&gt; &#123;</span><br><span class="line">        if (e.target.tagName &#x3D;&#x3D;&#x3D; &quot;A&quot;) &#123;</span><br><span class="line">          e.preventDefault();</span><br><span class="line">          const path &#x3D; e.target.getAttribute(&quot;href&quot;);</span><br><span class="line">          history.pushState(&#123; path: path &#125;, null, path);</span><br><span class="line">          watchHistory(path);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      function watchHistory() &#123;</span><br><span class="line">        const path &#x3D; window.location.pathname;</span><br><span class="line">        switch (path) &#123;</span><br><span class="line">          case &quot;&#x2F;red&quot;:</span><br><span class="line">            document.body.style.background &#x3D; &quot;red&quot;;</span><br><span class="line">            break;</span><br><span class="line">          case &quot;&#x2F;green&quot;:</span><br><span class="line">            document.body.style.background &#x3D; &quot;green&quot;;</span><br><span class="line">            break;</span><br><span class="line">          case &quot;&#x2F;grey&quot;:</span><br><span class="line">            document.body.style.background &#x3D; &quot;grey&quot;;</span><br><span class="line">            break;</span><br><span class="line">          default:</span><br><span class="line">            document.body.style.background &#x3D; &quot;#fff&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      window.addEventListener(&quot;popstate&quot;, watchHistory, false);</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">  &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>用了 HTML5 的实现，单页路由的 url 就不会多出一个 #，变得更加美观。</p><p><strong>但因为没有 # 号，所以当用户刷新页面之类的操作时，浏览器还是会给服务器发送请求。</strong></p><p>为了避免出现这种情况，history 模式需要服务器的支持，把所有路由都重定向到根页面。</p><h3 id="如何监听-pushState-和-replaceState-的变化"><a href="#如何监听-pushState-和-replaceState-的变化" class="headerlink" title="如何监听 pushState 和 replaceState 的变化"></a>如何监听 pushState 和 replaceState 的变化</h3><p>经过理论及实践我们知道 replaceState()，pushState() 两个 API 不会触发 popstate 监听事件。</p><p>我们可以生成全新的 window 监听事件监听其变化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function addListen(type) &#123;</span><br><span class="line">  const source &#x3D; history[type];</span><br><span class="line">  return function () &#123;</span><br><span class="line">    const event &#x3D; new Event(type);</span><br><span class="line">    event.arguments &#x3D; arguments;</span><br><span class="line">    window.dispatchEvent(event);</span><br><span class="line">    return source.apply(this, arguments);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">history.pushState &#x3D; addListen(&quot;pushState&quot;);</span><br><span class="line">history.replaceState &#x3D; addListen(&quot;replaceState&quot;);</span><br><span class="line"></span><br><span class="line">window.addEventListener(&quot;replaceState&quot;, (e) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(&quot;我监听了 replaceState&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">window.addEventListener(&quot;pushState&quot;, (e) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(&quot;我监听了 pushState&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="两种模式对比"><a href="#两种模式对比" class="headerlink" title="两种模式对比"></a>两种模式对比</h1><ol><li>无 # 的  history 模式更自然</li><li>history 模式需要 IE9 以上，相对于 hash 模式的 IE8 兼容性差</li><li>history 模式需服务器端配合，反过来说 hash 模式不支持服务端渲染</li></ol><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>以上就是前端路由的 hash 和 history 两种模式的主要原理及实现思路了，如果你觉得不错，别忘了点个赞😄！</p><hr><p>本文参考：</p><p><a href="https://juejin.im/post/5ac61da66fb9a028c71eae1b" target="_blank" rel="noopener">面试官: 你了解前端路由吗?</a></p><p><a href="https://juejin.im/post/5e85cb8151882573c66cf63f" target="_blank" rel="noopener">阿里P7：你了解路由吗？</a></p><p><a href="https://github.com/webfansplz/article/issues/1">[实践系列]前端路由</a></p>]]></content:encoded>
      
      <comments>https://github.com/Adashuai5/Adashuai5.github.io/2020/04/04/hash-%E6%A8%A1%E5%BC%8F%E5%92%8C-history-%E6%A8%A1%E5%BC%8F%E5%B0%8F%E8%AE%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Vue 项目编译时间过长问题</title>
      <link>https://github.com/Adashuai5/Adashuai5.github.io/2019/11/14/Vue-%E9%A1%B9%E7%9B%AE%E7%BC%96%E8%AF%91%E6%97%B6%E9%97%B4%E8%BF%87%E9%95%BF%E9%97%AE%E9%A2%98/</link>
      <guid>https://github.com/Adashuai5/Adashuai5.github.io/2019/11/14/Vue-%E9%A1%B9%E7%9B%AE%E7%BC%96%E8%AF%91%E6%97%B6%E9%97%B4%E8%BF%87%E9%95%BF%E9%97%AE%E9%A2%98/</guid>
      <pubDate>Thu, 14 Nov 2019 15:20:51 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;随着公司项目不断增大，项目打包编译的时长也不断增加，尤其是在公司使用 jenkins 自动化部署以后更甚。由此我想到此问题可能是引入依赖过多而造成。通过 google 查看分析，终于找到相关问题并初步实践，方法如下：&lt;/p&gt;
&lt;h1 id=&quot;1-使用-webpack-bun
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>随着公司项目不断增大，项目打包编译的时长也不断增加，尤其是在公司使用 jenkins 自动化部署以后更甚。由此我想到此问题可能是引入依赖过多而造成。通过 google 查看分析，终于找到相关问题并初步实践，方法如下：</p><h1 id="1-使用-webpack-bundle-analyzer-分析项目外部依赖大小"><a href="#1-使用-webpack-bundle-analyzer-分析项目外部依赖大小" class="headerlink" title="1. 使用 webpack-bundle-analyzer 分析项目外部依赖大小"></a>1. 使用 <a href="https://github.com/webpack-contrib/webpack-bundle-analyzer">webpack-bundle-analyzer</a> 分析项目外部依赖大小</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># NPM</span><br><span class="line">npm install --save-dev webpack-bundle-analyzer</span><br><span class="line"># Yarn</span><br><span class="line">yarn add -D webpack-bundle-analyzer</span><br></pre></td></tr></table></figure><p>官网显示的使用方法，需要在 webpack.config.js 内配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const BundleAnalyzerPlugin &#x3D; require(&#39;webpack-bundle-analyzer&#39;).BundleAnalyzerPlugin;</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    new BundleAnalyzerPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而我们的项目是使用 vue-cli3 搭建，其内置 webpack （也就是没有 webpack.config.js），因此我们找到 vue.config.js 使用如下代码引入插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; vue.config.js</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line"></span><br><span class="line">  chainWebpack: config &#x3D;&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F;*&#x2F;&#x2F;</span><br><span class="line">    config</span><br><span class="line">      .plugin(&#39;webpack-bundle-analyzer&#39;)</span><br><span class="line">      .use(require(&#39;webpack-bundle-analyzer&#39;).BundleAnalyzerPlugin)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时运行 yarn serve 会执行 webpack-bundle-analyzer 插件 BundleAnalyzerPlugin 的默认功能</p><p><img src="https://upload-images.jianshu.io/upload_images/7094266-ab4bc9a1e287601a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>serve 完成，会在浏览器自动生成依赖大小分析的可视化网站，如下图所示</p><p><img src="https://upload-images.jianshu.io/upload_images/7094266-a23b069d62f17087.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h1 id="2-使用-webpack-外部扩展-externals"><a href="#2-使用-webpack-外部扩展-externals" class="headerlink" title="2. 使用 webpack 外部扩展(externals)"></a>2. 使用 <a href="https://www.webpackjs.com/configuration/externals/" target="_blank" rel="noopener">webpack 外部扩展(externals)</a></h1><blockquote><p>防止将某些 import 的包(package)打包到 bundle 中，而是在运行时(runtime)再去从外部获取这些扩展依赖</p></blockquote><h2 id="使用前打包时间"><a href="#使用前打包时间" class="headerlink" title="使用前打包时间"></a>使用前打包时间</h2><p><img src="https://upload-images.jianshu.io/upload_images/7094266-db8c24d4609bb95c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>使用 externals 过滤我们希望通过 cdn 引入的依赖，同样在 vue.config.js 配置：<br>（注意所需依赖的别名）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; vue.config.js</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line"></span><br><span class="line">  chainWebpack: config &#x3D;&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F;*&#x2F;&#x2F;</span><br><span class="line">    config.externals(&#123;</span><br><span class="line">      &#39;axios&#39;: &#39;axios&#39;,</span><br><span class="line">      &#39;vue&#39;: &#39;Vue&#39;,</span><br><span class="line">      &#39;vue-router&#39;: &#39;VueRouter&#39;,</span><br><span class="line">      &#39;vuex&#39;: &#39;Vuex&#39;,</span><br><span class="line">      &#39;element-ui&#39;: &#39;ELEMENT&#39; &#x2F;&#x2F; 注意此处要全大写且 Vue.use(ELEMENT)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而后在项目 index.html 文件内引入对应 cdn</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- public&#x2F;index.html --&gt;</span><br><span class="line">  &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;vue&#x2F;2.6.10&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;vue-router&#x2F;3.1.3&#x2F;vue-router.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;axios&#x2F;0.19.0-beta.1&#x2F;axios.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;vuex&#x2F;3.1.1&#x2F;vuex.min.js&quot;&gt;</span><br><span class="line">  &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;element-ui&#x2F;2.3.3&#x2F;index.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>需要将原来的引用注释，我们的过滤才能生效</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import Vue from "vue"</span></span><br><span class="line"><span class="comment">// import Element from "element-ui"</span></span><br></pre></td></tr></table></figure><p>再次使用 webpack-bundle-analyzer，可以看到依赖的体积减少了近 10 M</p><p><img src="https://upload-images.jianshu.io/upload_images/7094266-8519d5ef027b6035.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="使用后打包时间"><a href="#使用后打包时间" class="headerlink" title="使用后打包时间"></a>使用后打包时间</h2><p>再次打包，打包时间缩短了近一倍</p><p><img src="https://upload-images.jianshu.io/upload_images/7094266-7df2a6d82c804a18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>未完待续。。。</p><hr><p>参考<br><a href="https://juejin.im/post/5d7266495188256f3b09baea" target="_blank" rel="noopener">vue-cli3 使用 webpack-bundle-analyzer 插件</a>;<br><a href="https://www.jianshu.com/p/b2fe6aebe691" target="_blank" rel="noopener">解决 vue 打包 wendor 过大的问题</a></p>]]></content:encoded>
      
      <comments>https://github.com/Adashuai5/Adashuai5.github.io/2019/11/14/Vue-%E9%A1%B9%E7%9B%AE%E7%BC%96%E8%AF%91%E6%97%B6%E9%97%B4%E8%BF%87%E9%95%BF%E9%97%AE%E9%A2%98/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Flutter 踩坑之环境搭建</title>
      <link>https://github.com/Adashuai5/Adashuai5.github.io/2019/06/12/Flutter-%E8%B8%A9%E5%9D%91%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
      <guid>https://github.com/Adashuai5/Adashuai5.github.io/2019/06/12/Flutter-%E8%B8%A9%E5%9D%91%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
      <pubDate>Wed, 12 Jun 2019 14:09:03 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;对于前端来说， flutter 学习的难点在于环境搭建&lt;br&gt;在跟随 &lt;a href=&quot;https://jspang.com/posts/2019/01/20/flutter-base.html#%E7%AC%AC02%E8%8A%82%EF%BC%9Aflutter%E5
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>对于前端来说， flutter 学习的难点在于环境搭建<br>在跟随 <a href="https://jspang.com/posts/2019/01/20/flutter-base.html#%E7%AC%AC02%E8%8A%82%EF%BC%9Aflutter%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BAwindows%E7%89%88" target="_blank" rel="noopener">技术胖：Flutter 开发环境搭建 Windows 版</a> 时<br>出现以下 ✗ Android license status unknown 的环境错误</p><p><img src="https://upload-images.jianshu.io/upload_images/7094266-e2d7d273e10ecf41.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>在 <a href="https://github.com/flutter/flutter/issues/16025#">✗ Android license status unknown.</a> issue 内找到答案</p><h1 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h1><p>在下方路径内找到 sdkmanager.bat 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator\AppData\Local\Android\Sdk\tools\bin</span><br></pre></td></tr></table></figure><p>在以下区域加入如 17 行所示 set JAVA_HOME=”xxx\Android Studio\jre”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">16 @rem Add default JVM options here. You can also use JAVA_OPTS and SDKMANAGER_OPTS to pass JVM options to this script.</span><br><span class="line">+17 set JAVA_HOME&#x3D;&quot;F:\ada\Android Studio\jre&quot; &#x2F;&#x2F; 你的 Android Studio\jre 路径</span><br><span class="line">18 set DEFAULT_JVM_OPTS&#x3D;&quot;-Dcom.android.sdklib.toolsdir&#x3D;%~dp0\..&quot;</span><br></pre></td></tr></table></figure><p>再运行 flutter doctor</p><p><img src="https://upload-images.jianshu.io/upload_images/7094266-49d92a6402463517.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>根据提示运行 flutter doctor –android-licenses<br>然后一直 y 就可以了</p><p><img src="https://upload-images.jianshu.io/upload_images/7094266-d8ba85e97083d9cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>可以继续愉快得学习拉！</p>]]></content:encoded>
      
      <comments>https://github.com/Adashuai5/Adashuai5.github.io/2019/06/12/Flutter-%E8%B8%A9%E5%9D%91%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/#disqus_thread</comments>
    </item>
    
    <item>
      <title>7 个实用的 JavaScript 小技巧（译文）</title>
      <link>https://github.com/Adashuai5/Adashuai5.github.io/2019/05/06/7%E4%B8%AA%E5%AE%9E%E7%94%A8%E7%9A%84-JavaScript-%E5%B0%8F%E6%8A%80%E5%B7%A7%EF%BC%88%E8%AF%91%E6%96%87%EF%BC%89/</link>
      <guid>https://github.com/Adashuai5/Adashuai5.github.io/2019/05/06/7%E4%B8%AA%E5%AE%9E%E7%94%A8%E7%9A%84-JavaScript-%E5%B0%8F%E6%8A%80%E5%B7%A7%EF%BC%88%E8%AF%91%E6%96%87%EF%BC%89/</guid>
      <pubDate>Mon, 06 May 2019 15:52:09 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;本文为译文，第一次尝试翻译英文博客，很多地方翻译得不好。本文内容十分简单，可直接查看英文原文，或直接看代码部分。文章每一部分都有拓展（暂未翻译），可点击查看。&lt;br&gt;原文：&lt;a href=&quot;https://davidwalsh.name/javascript-tricks&quot;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>本文为译文，第一次尝试翻译英文博客，很多地方翻译得不好。本文内容十分简单，可直接查看英文原文，或直接看代码部分。文章每一部分都有拓展（暂未翻译），可点击查看。<br>原文：<a href="https://davidwalsh.name/javascript-tricks" target="_blank" rel="noopener">7 Useful JavaScript Tricks</a><br>以下为译文：<br>和其他编程语言一样，JavaScript 有着许多技巧来解决一些简单的、亦或是困难的任务。其中有大家所熟知的部分，但也有一些技巧可能超乎你的想象。现在让我们来看一下这七个你随即可用的 JavaScript 小技巧！</p><h1 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h1><p>获取<a href="https://davidwalsh.name/array-unique" target="_blank" rel="noopener">数组的唯一值</a>可能比你想象中要简单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var j &#x3D; [...new Set([1, 2, 3, 3])]</span><br><span class="line">&gt;&gt; [1, 2, 3]</span><br></pre></td></tr></table></figure><p>我超爱（…）和 Set！</p><h1 id="数组配合布尔"><a href="#数组配合布尔" class="headerlink" title="数组配合布尔"></a>数组配合布尔</h1><p>要从一个数组中<a href="https://davidwalsh.name/array-boolean" target="_blank" rel="noopener">过滤 falsy 值</a>？你或许不知道有这种技巧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">myArray</span><br><span class="line">    .map(item &#x3D;&gt; &#123;</span><br><span class="line">        &#x2F;&#x2F; ...</span><br><span class="line">        &#x2F;&#x2F; 记得 return</span><br><span class="line">    &#125;)</span><br><span class="line">    &#x2F;&#x2F; 摆脱这些空值</span><br><span class="line">    .filter(Boolean);</span><br></pre></td></tr></table></figure><p>只需传递 Boolean 就能去除这些 falsy 值！</p><h1 id="创建一个空的对象"><a href="#创建一个空的对象" class="headerlink" title="创建一个空的对象"></a>创建一个空的对象</h1><p>当然，似乎你可以通过像 {} 这样来创建一个空对象，但实际上这样创建的对象还是有__proto__、hasOwnProperty 以及其他对象的方法。下面是一种<a href="https://davidwalsh.name/object-create-null" target="_blank" rel="noopener">创造一个纯对象</a>的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let dict &#x3D; Object.create(null);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; dict.__proto__ &#x3D;&#x3D;&#x3D; &quot;undefined&quot;</span><br><span class="line">&#x2F;&#x2F; 在你添加动态属性之前为空</span><br></pre></td></tr></table></figure><p>这个对象上绝对没有你没有放入的键或方法！</p><h1 id="合并对象"><a href="#合并对象" class="headerlink" title="合并对象"></a>合并对象</h1><p>JavaScript <a href="https://davidwalsh.name/merge-objects" target="_blank" rel="noopener">合并多个对象</a>的需求由来已久，尤其是当我们创建带有选项的类和小部件时：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">const person &#x3D; &#123; name: &#39;David Walsh&#39;, gender: &#39;Male&#39; &#125;;</span><br><span class="line">const tools &#x3D; &#123; computer: &#39;Mac&#39;, editor: &#39;Atom&#39; &#125;;</span><br><span class="line">const attributes &#x3D; &#123; handsomeness: &#39;Extreme&#39;, hair: &#39;Brown&#39;, eyes: &#39;Blue&#39; &#125;;</span><br><span class="line"></span><br><span class="line">const summary &#x3D; &#123;...person, ...tools, ...attributes&#125;;</span><br><span class="line">&#x2F;*</span><br><span class="line">Object &#123;</span><br><span class="line">  &quot;computer&quot;: &quot;Mac&quot;,</span><br><span class="line">  &quot;editor&quot;: &quot;Atom&quot;,</span><br><span class="line">  &quot;eyes&quot;: &quot;Blue&quot;,</span><br><span class="line">  &quot;gender&quot;: &quot;Male&quot;,</span><br><span class="line">  &quot;hair&quot;: &quot;Brown&quot;,</span><br><span class="line">  &quot;handsomeness&quot;: &quot;Extreme&quot;,</span><br><span class="line">  &quot;name&quot;: &quot;David Walsh&quot;,</span><br><span class="line">&#125;</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><p>这三个点让任务变得简单多了！</p><h1 id="强制函数传参"><a href="#强制函数传参" class="headerlink" title="强制函数传参"></a>强制函数传参</h1><p>能够为函数参数设置默认值是 JavaScript 的一个很棒的补充。请查看这个技巧，<a href="[https://davidwalsh.name/javascript-function-parameters](https://davidwalsh.name/javascript-function-parameters)">要求为给定的参数</a>传递值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const isRequired &#x3D; () &#x3D;&gt; &#123; throw new Error(&#39;param is required&#39;); &#125;;</span><br><span class="line"></span><br><span class="line">const hello &#x3D; (name &#x3D; isRequired()) &#x3D;&gt; &#123; console.log(&#96;hello $&#123;name&#125;&#96;) &#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 由于没给 hello() 传 name，该代码会报错</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 下面代码也会报错</span><br><span class="line">hello(undefined);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 来看看符合要求的写法</span><br><span class="line">hello(null);</span><br><span class="line">hello(&#39;David&#39;);</span><br></pre></td></tr></table></figure><p>这是一些下一级验证和 JavaScript 用法</p><h1 id="解构别名"><a href="#解构别名" class="headerlink" title="解构别名"></a>解构别名</h1><p><a href="https://davidwalsh.name/destructuring-alias" target="_blank" rel="noopener">解构赋值</a>是一个非常受欢迎的 JavaScript 升级，但有时我们更喜欢用其他名称引用这些属性，所以我们可以利用别名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const obj &#x3D; &#123; x: 1 &#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Grabs obj.x as &#123; x &#125;</span><br><span class="line">const &#123; x &#125; &#x3D; obj;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Grabs obj.x as &#123; otherName &#125;</span><br><span class="line">const &#123; x: otherName &#125; &#x3D; obj;</span><br></pre></td></tr></table></figure><p>有效避免了与现有变量的命名冲突！</p><h1 id="获取查询字符串参数"><a href="#获取查询字符串参数" class="headerlink" title="获取查询字符串参数"></a>获取查询字符串参数</h1><p>多年来，我们编写了大量正则表达式来获取查询字符串值，但那些日子已经一去不复返了——我们拥有了令人惊叹的 <a href="[https://davidwalsh.name/query-string-javascript](https://davidwalsh.name/query-string-javascript)">URLSearchParams</a> API</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 假设 &quot;?post&#x3D;1234&amp;action&#x3D;edit&quot;</span><br><span class="line"></span><br><span class="line">var urlParams &#x3D; new URLSearchParams(window.location.search);</span><br><span class="line"></span><br><span class="line">console.log(urlParams.has(&#39;post&#39;)); &#x2F;&#x2F; true</span><br><span class="line">console.log(urlParams.get(&#39;action&#39;)); &#x2F;&#x2F; &quot;edit&quot;</span><br><span class="line">console.log(urlParams.getAll(&#39;action&#39;)); &#x2F;&#x2F; [&quot;edit&quot;]</span><br><span class="line">console.log(urlParams.toString()); &#x2F;&#x2F; &quot;?post&#x3D;1234&amp;action&#x3D;edit&quot;</span><br><span class="line">console.log(urlParams.append(&#39;active&#39;, &#39;1&#39;)); &#x2F;&#x2F; &quot;?post&#x3D;1234&amp;action&#x3D;edit&amp;active&#x3D;1&quot;</span><br></pre></td></tr></table></figure><p>是不是比之前简单多了。</p><p>这些年 JavaScript 已经发生了很大的变化，但我最喜欢的部分是我们现在看到 JavaScript 语言改进的速度。尽管 JavaScript 在不断动态变化，我们仍然需要使用一些不错的技巧;把这些技巧放在你的工具箱里，以备不时之需!</p><p>你最喜欢的 JavaScript 技巧是什么呢？</p>]]></content:encoded>
      
      <comments>https://github.com/Adashuai5/Adashuai5.github.io/2019/05/06/7%E4%B8%AA%E5%AE%9E%E7%94%A8%E7%9A%84-JavaScript-%E5%B0%8F%E6%8A%80%E5%B7%A7%EF%BC%88%E8%AF%91%E6%96%87%EF%BC%89/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
